shadow$provide[82]=function(r,l,A,p){var k=l(0),m=l(8),d=l(72),c=l(77),a=l(81),b=l(80);const e={scaleMode:k.SCALE_MODES.NEAREST,alphaMode:k.ALPHA_MODES.NPM};r=(()=>{const g=class extends d.EventEmitter{constructor(f=null,h=null){super();h=Object.assign({},g.defaultOptions,h);const {alphaMode:n,mipmap:q,anisotropicLevel:t,scaleMode:u,width:v,height:x,wrapMode:z,format:y,type:C,target:B,resolution:w,resourceOptions:E}=h;f&&!(f instanceof b.Resource)&&(f=c.autoDetectResource(f,E),f.internal=!0);this.resolution=
w||m.settings.RESOLUTION;this.width=Math.round((v||0)*this.resolution)/this.resolution;this.height=Math.round((x||0)*this.resolution)/this.resolution;this._mipmap=q;this.anisotropicLevel=t;this._wrapMode=z;this._scaleMode=u;this.format=y;this.type=C;this.target=B;this.alphaMode=n;this.uid=d.uid();this.touched=0;this.isPowerOfTwo=!1;this._refreshPOT();this._glTextures={};this.dirtyStyleId=this.dirtyId=0;this.cacheId=null;this.valid=0<v&&0<x;this.textureCacheIds=[];this.destroyed=!1;this.resource=null;
this._batchLocation=this._batchEnabled=0;this.parentTextureArray=null;this.setResource(f)}get realWidth(){return Math.round(this.width*this.resolution)}get realHeight(){return Math.round(this.height*this.resolution)}get mipmap(){return this._mipmap}set mipmap(f){this._mipmap!==f&&(this._mipmap=f,this.dirtyStyleId++)}get scaleMode(){return this._scaleMode}set scaleMode(f){this._scaleMode!==f&&(this._scaleMode=f,this.dirtyStyleId++)}get wrapMode(){return this._wrapMode}set wrapMode(f){this._wrapMode!==
f&&(this._wrapMode=f,this.dirtyStyleId++)}setStyle(f,h){let n;return void 0!==f&&f!==this.scaleMode&&(this.scaleMode=f,n=!0),void 0!==h&&h!==this.mipmap&&(this.mipmap=h,n=!0),n&&this.dirtyStyleId++,this}setSize(f,h,n){return n=n||this.resolution,this.setRealSize(f*n,h*n,n)}setRealSize(f,h,n){return this.resolution=n||this.resolution,this.width=Math.round(f)/this.resolution,this.height=Math.round(h)/this.resolution,this._refreshPOT(),this.update(),this}_refreshPOT(){this.isPowerOfTwo=d.isPow2(this.realWidth)&&
d.isPow2(this.realHeight)}setResolution(f){const h=this.resolution;return h===f?this:(this.resolution=f,this.valid&&(this.width=Math.round(this.width*h)/f,this.height=Math.round(this.height*h)/f,this.emit("update",this)),this._refreshPOT(),this)}setResource(f){if(this.resource===f)return this;if(this.resource)throw Error("Resource can be set only once");return f.bind(this),this.resource=f,this}update(){this.valid?(this.dirtyId++,this.dirtyStyleId++,this.emit("update",this)):0<this.width&&0<this.height&&
(this.valid=!0,this.emit("loaded",this),this.emit("update",this))}onError(f){this.emit("error",this,f)}destroy(){this.resource&&(this.resource.unbind(this),this.resource.internal&&this.resource.destroy(),this.resource=null);this.cacheId&&(delete d.BaseTextureCache[this.cacheId],delete d.TextureCache[this.cacheId],this.cacheId=null);this.valid=!1;this.dispose();g.removeFromCache(this);this.textureCacheIds=null;this.destroyed=!0;this.emit("destroyed",this);this.removeAllListeners()}dispose(){this.emit("dispose",
this)}castToBaseTexture(){return this}static from(f,h,n=m.settings.STRICT_TEXTURE_CACHE){const q="string"==typeof f;let t;q?t=f:(f._pixiId||(f._pixiId=`${h?.pixiIdPrefix||"pixiid"}_${d.uid()}`),t=f._pixiId);let u=d.BaseTextureCache[t];if(q&&n&&!u)throw Error(`The cacheId "${t}" does not exist in BaseTextureCache.`);return u||(u=new g(f,h),u.cacheId=t,g.addToCache(u,t)),u}static fromBuffer(f,h,n,q){f=f||new Float32Array(h*n*4);h=new a.BufferResource(f,{width:h,height:n,...q?.resourceOptions});let t,
u;return f instanceof Float32Array?(t=k.FORMATS.RGBA,u=k.TYPES.FLOAT):f instanceof Int32Array?(t=k.FORMATS.RGBA_INTEGER,u=k.TYPES.INT):f instanceof Uint32Array?(t=k.FORMATS.RGBA_INTEGER,u=k.TYPES.UNSIGNED_INT):f instanceof Int16Array?(t=k.FORMATS.RGBA_INTEGER,u=k.TYPES.SHORT):f instanceof Uint16Array?(t=k.FORMATS.RGBA_INTEGER,u=k.TYPES.UNSIGNED_SHORT):f instanceof Int8Array?(t=k.FORMATS.RGBA,u=k.TYPES.BYTE):(t=k.FORMATS.RGBA,u=k.TYPES.UNSIGNED_BYTE),h.internal=!0,new g(h,Object.assign({},e,{type:u,
format:t},q))}static addToCache(f,h){h&&(f.textureCacheIds.includes(h)||f.textureCacheIds.push(h),d.BaseTextureCache[h]&&d.BaseTextureCache[h]!==f&&console.warn(`BaseTexture added to the cache with an id [${h}] that already had an entry`),d.BaseTextureCache[h]=f)}static removeFromCache(f){if("string"==typeof f){var h=d.BaseTextureCache[f];if(h){const n=h.textureCacheIds.indexOf(f);return-1<n&&h.textureCacheIds.splice(n,1),delete d.BaseTextureCache[f],h}}else if(f?.textureCacheIds){for(h=0;h<f.textureCacheIds.length;++h)delete d.BaseTextureCache[f.textureCacheIds[h]];
return f.textureCacheIds.length=0,f}return null}};return g})();r.defaultOptions={mipmap:k.MIPMAP_MODES.POW2,anisotropicLevel:0,scaleMode:k.SCALE_MODES.LINEAR,wrapMode:k.WRAP_MODES.CLAMP,alphaMode:k.ALPHA_MODES.UNPACK,target:k.TARGETS.TEXTURE_2D,format:k.FORMATS.RGBA,type:k.TYPES.UNSIGNED_BYTE};r._globalBatch=0;p.BaseTexture=r}
goog.provide("module$node_modules$$pixi$core$lib$textures$BaseTexture");
goog.global. module$node_modules$$pixi$core$lib$textures$BaseTexture=shadow.js.require(82, {});
