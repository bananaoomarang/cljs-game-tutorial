shadow$provide[74]=function(r,l,A,p){class k{constructor(m){"number"==typeof m?this.rawBinaryData=new ArrayBuffer(m):m instanceof Uint8Array?this.rawBinaryData=m.buffer:this.rawBinaryData=m;this.uint32View=new Uint32Array(this.rawBinaryData);this.float32View=new Float32Array(this.rawBinaryData)}get int8View(){return this._int8View||(this._int8View=new Int8Array(this.rawBinaryData)),this._int8View}get uint8View(){return this._uint8View||(this._uint8View=new Uint8Array(this.rawBinaryData)),this._uint8View}get int16View(){return this._int16View||
(this._int16View=new Int16Array(this.rawBinaryData)),this._int16View}get uint16View(){return this._uint16View||(this._uint16View=new Uint16Array(this.rawBinaryData)),this._uint16View}get int32View(){return this._int32View||(this._int32View=new Int32Array(this.rawBinaryData)),this._int32View}view(m){return this[`${m}View`]}destroy(){this.float32View=this.uint32View=this._int32View=this._uint16View=this._int16View=this._uint8View=this._int8View=this.rawBinaryData=null}static sizeOf(m){switch(m){case "int8":case "uint8":return 1;
case "int16":case "uint16":return 2;case "int32":case "uint32":case "float32":return 4;default:throw Error(`${m} isn't a valid view type`);}}}p.ViewableBuffer=k}
goog.provide("module$node_modules$$pixi$core$lib$geometry$ViewableBuffer");
goog.global. module$node_modules$$pixi$core$lib$geometry$ViewableBuffer=shadow.js.require(74, {});
