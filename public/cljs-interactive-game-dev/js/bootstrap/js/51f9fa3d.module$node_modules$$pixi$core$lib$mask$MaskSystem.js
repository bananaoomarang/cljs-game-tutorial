shadow$provide[154]=function(r,l,A,p){var k=l(0);r=l(73);var m=l(152),d=l(153);class c{constructor(a){this.renderer=a;this.enableScissor=!0;this.alphaMaskPool=[];this.maskDataPool=[];this.maskStack=[];this.alphaMaskIndex=0}setMaskStack(a){this.maskStack=a;this.renderer.scissor.setMaskStack(a);this.renderer.stencil.setMaskStack(a)}push(a,b){var e=b;e.isMaskData||(e=this.maskDataPool.pop()||new d.MaskData,e.pooled=!0,e.maskObject=b);b=0!==this.maskStack.length?this.maskStack[this.maskStack.length-1]:
null;if(e.copyCountersOrReset(b),e._colorMask=b?b._colorMask:15,e.autoDetect&&this.detect(e),e._target=a,e.type!==k.MASK_TYPES.SPRITE&&this.maskStack.push(e),e.enabled)switch(e.type){case k.MASK_TYPES.SCISSOR:this.renderer.scissor.push(e);break;case k.MASK_TYPES.STENCIL:this.renderer.stencil.push(e);break;case k.MASK_TYPES.SPRITE:e.copyCountersOrReset(null);this.pushSpriteMask(e);break;case k.MASK_TYPES.COLOR:this.pushColorMask(e)}e.type===k.MASK_TYPES.SPRITE&&this.maskStack.push(e)}pop(a){const b=
this.maskStack.pop();if(b&&b._target===a){if(b.enabled)switch(b.type){case k.MASK_TYPES.SCISSOR:this.renderer.scissor.pop(b);break;case k.MASK_TYPES.STENCIL:this.renderer.stencil.pop(b.maskObject);break;case k.MASK_TYPES.SPRITE:this.popSpriteMask(b);break;case k.MASK_TYPES.COLOR:this.popColorMask(b)}if(b.reset(),b.pooled&&this.maskDataPool.push(b),0!==this.maskStack.length)a=this.maskStack[this.maskStack.length-1],a.type===k.MASK_TYPES.SPRITE&&a._filters&&(a._filters[0].maskSprite=a.maskObject)}}detect(a){const b=
a.maskObject;b?b.isSprite?a.type=k.MASK_TYPES.SPRITE:this.enableScissor&&this.renderer.scissor.testScissor(a)?a.type=k.MASK_TYPES.SCISSOR:a.type=k.MASK_TYPES.STENCIL:a.type=k.MASK_TYPES.COLOR}pushSpriteMask(a){const {maskObject:b}=a,e=a._target;let g=a._filters;g||(g=this.alphaMaskPool[this.alphaMaskIndex],g||(g=this.alphaMaskPool[this.alphaMaskIndex]=[new m.SpriteMaskFilter]));g[0].resolution=a.resolution;g[0].multisample=a.multisample;g[0].maskSprite=b;const f=e.filterArea;e.filterArea=b.getBounds(!0);
this.renderer.filter.push(e,g);e.filterArea=f;a._filters||this.alphaMaskIndex++}popSpriteMask(a){this.renderer.filter.pop();a._filters?a._filters[0].maskSprite=null:(this.alphaMaskIndex--,this.alphaMaskPool[this.alphaMaskIndex][0].maskSprite=null)}pushColorMask(a){const b=a._colorMask;a=a._colorMask=b&a.colorMask;a!==b&&this.renderer.gl.colorMask(0!==(a&1),0!==(a&2),0!==(a&4),0!==(a&8))}popColorMask(a){const b=0<this.maskStack.length?this.maskStack[this.maskStack.length-1]._colorMask:15;b!==a._colorMask&&
this.renderer.gl.colorMask(0!==(b&1),0!==(b&2),0!==(b&4),0!==(b&8))}destroy(){this.renderer=null}}c.extension={type:r.ExtensionType.RendererSystem,name:"mask"};r.extensions.add(c);p.MaskSystem=c}
goog.provide("module$node_modules$$pixi$core$lib$mask$MaskSystem");
goog.global. module$node_modules$$pixi$core$lib$mask$MaskSystem=shadow.js.require(154, {});
