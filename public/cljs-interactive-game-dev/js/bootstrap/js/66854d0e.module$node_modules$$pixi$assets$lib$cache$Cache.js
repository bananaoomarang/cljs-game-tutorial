shadow$provide[268]=function(r,l,A,p){var k=l(209);l(267);var m=l(263);class d{constructor(){this._parsers=[];this._cache=new Map;this._cacheMap=new Map}reset(){this._cacheMap.clear();this._cache.clear()}has(c){return this._cache.has(c)}get(c){const a=this._cache.get(c);return a||console.warn(`[Assets] Asset id ${c} was not found in the Cache`),a}set(c,a){c=m.convertToList(c);let b;for(var e=0;e<this.parsers.length;e++){const f=this.parsers[e];if(f.test(a)){b=f.getCacheableAssets(c,a);break}}b||(b=
{},c.forEach(f=>{b[f]=a}));e=Object.keys(b);const g={cacheKeys:e,keys:c};(c.forEach(f=>{this._cacheMap.set(f,g)}),e.forEach(f=>{this._cache.has(f)&&this._cache.get(f)!==a&&console.warn("[Cache] already has key:",f);this._cache.set(f,b[f])}),a instanceof k.Texture)&&c.forEach(f=>{a.baseTexture!==k.Texture.EMPTY.baseTexture&&k.BaseTexture.addToCache(a.baseTexture,f);k.Texture.addToCache(a,f)})}remove(c){this._cacheMap.has(c)?(c=this._cacheMap.get(c),c.cacheKeys.forEach(a=>{this._cache.delete(a)}),c.keys.forEach(a=>
{this._cacheMap.delete(a)})):console.warn(`[Assets] Asset id ${c} was not found in the Cache`)}get parsers(){return this._parsers}}r=new d;p.Cache=r}
goog.provide("module$node_modules$$pixi$assets$lib$cache$Cache");
goog.global. module$node_modules$$pixi$assets$lib$cache$Cache=shadow.js.require(268, {});
