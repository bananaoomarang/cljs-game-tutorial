shadow$provide[200]=function(r,l,A,p){var k=l(0);r=l(199);class m extends r.AbstractMultiResource{constructor(d,c){const {width:a,height:b}=c||{};let e,g;Array.isArray(d)?(e=d,g=d.length):g=d;super(g,{width:a,height:b});e&&this.initFromArray(e,c)}addBaseTextureAt(d,c){if(d.resource)this.addResourceAt(d.resource,c);else throw Error("ArrayResource does not support RenderTexture");return this}bind(d){super.bind(d);d.target=k.TARGETS.TEXTURE_2D_ARRAY}upload(d,c,a){const {length:b,itemDirtyIds:e,items:g}=
this;({gl:d}=d);0>a.dirtyId&&d.texImage3D(d.TEXTURE_2D_ARRAY,0,a.internalFormat,this._width,this._height,b,0,c.format,a.type,null);for(let f=0;f<b;f++){const h=g[f];e[f]<h.dirtyId&&(e[f]=h.dirtyId,h.valid&&d.texSubImage3D(d.TEXTURE_2D_ARRAY,0,0,0,f,h.resource.width,h.resource.height,1,c.format,a.type,h.resource.source))}return!0}}p.ArrayResource=m}
goog.provide("module$node_modules$$pixi$core$lib$textures$resources$ArrayResource");
goog.global. module$node_modules$$pixi$core$lib$textures$resources$ArrayResource=shadow.js.require(200, {});
