shadow$provide[107]=function(r,l,A,p){p.uniformParsers=[{test:k=>"float"===k.type&&1===k.size&&!k.isArray,code:k=>`
            if(uv["${k}"] !== ud["${k}"].value)
            {
                ud["${k}"].value = uv["${k}"]
                gl.uniform1f(ud["${k}"].location, uv["${k}"])
            }
            `},{test:(k,m)=>("sampler2D"===k.type||"samplerCube"===k.type||"sampler2DArray"===k.type)&&1===k.size&&!k.isArray&&(null==m||void 0!==m.castToBaseTexture),code:k=>`t = syncData.textureCount++;

            renderer.texture.bind(uv["${k}"], t);

            if(ud["${k}"].value !== t)
            {
                ud["${k}"].value = t;
                gl.uniform1i(ud["${k}"].location, t);
; // eslint-disable-line max-len
            }`},{test:(k,m)=>"mat3"===k.type&&1===k.size&&!k.isArray&&void 0!==m.a,code:k=>`
            gl.uniformMatrix3fv(ud["${k}"].location, false, uv["${k}"].toArray(true));
            `,codeUbo:k=>`
                var ${k}_matrix = uv.${k}.toArray(true);

                data[offset] = ${k}_matrix[0];
                data[offset+1] = ${k}_matrix[1];
                data[offset+2] = ${k}_matrix[2];
        
                data[offset + 4] = ${k}_matrix[3];
                data[offset + 5] = ${k}_matrix[4];
                data[offset + 6] = ${k}_matrix[5];
        
                data[offset + 8] = ${k}_matrix[6];
                data[offset + 9] = ${k}_matrix[7];
                data[offset + 10] = ${k}_matrix[8];
            `},{test:(k,m)=>"vec2"===k.type&&1===k.size&&!k.isArray&&void 0!==m.x,code:k=>`
                cv = ud["${k}"].value;
                v = uv["${k}"];

                if(cv[0] !== v.x || cv[1] !== v.y)
                {
                    cv[0] = v.x;
                    cv[1] = v.y;
                    gl.uniform2f(ud["${k}"].location, v.x, v.y);
                }`,codeUbo:k=>`
                v = uv.${k};

                data[offset] = v.x;
                data[offset+1] = v.y;
            `},{test:k=>"vec2"===k.type&&1===k.size&&!k.isArray,code:k=>`
                cv = ud["${k}"].value;
                v = uv["${k}"];

                if(cv[0] !== v[0] || cv[1] !== v[1])
                {
                    cv[0] = v[0];
                    cv[1] = v[1];
                    gl.uniform2f(ud["${k}"].location, v[0], v[1]);
                }
            `},{test:(k,m)=>"vec4"===k.type&&1===k.size&&!k.isArray&&void 0!==m.width,code:k=>`
                cv = ud["${k}"].value;
                v = uv["${k}"];

                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)
                {
                    cv[0] = v.x;
                    cv[1] = v.y;
                    cv[2] = v.width;
                    cv[3] = v.height;
                    gl.uniform4f(ud["${k}"].location, v.x, v.y, v.width, v.height)
                }`,codeUbo:k=>`
                    v = uv.${k};

                    data[offset] = v.x;
                    data[offset+1] = v.y;
                    data[offset+2] = v.width;
                    data[offset+3] = v.height;
                `},{test:(k,m)=>"vec4"===k.type&&1===k.size&&!k.isArray&&void 0!==m.red,code:k=>`
                cv = ud["${k}"].value;
                v = uv["${k}"];

                if(cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha)
                {
                    cv[0] = v.red;
                    cv[1] = v.green;
                    cv[2] = v.blue;
                    cv[3] = v.alpha;
                    gl.uniform4f(ud["${k}"].location, v.red, v.green, v.blue, v.alpha)
                }`,codeUbo:k=>`
                    v = uv.${k};

                    data[offset] = v.red;
                    data[offset+1] = v.green;
                    data[offset+2] = v.blue;
                    data[offset+3] = v.alpha;
                `},{test:(k,m)=>"vec3"===k.type&&1===k.size&&!k.isArray&&void 0!==m.red,code:k=>`
                cv = ud["${k}"].value;
                v = uv["${k}"];

                if(cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.a)
                {
                    cv[0] = v.red;
                    cv[1] = v.green;
                    cv[2] = v.blue;
    
                    gl.uniform3f(ud["${k}"].location, v.red, v.green, v.blue)
                }`,codeUbo:k=>`
                    v = uv.${k};

                    data[offset] = v.red;
                    data[offset+1] = v.green;
                    data[offset+2] = v.blue;
                `},{test:k=>"vec4"===k.type&&1===k.size&&!k.isArray,code:k=>`
                cv = ud["${k}"].value;
                v = uv["${k}"];

                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])
                {
                    cv[0] = v[0];
                    cv[1] = v[1];
                    cv[2] = v[2];
                    cv[3] = v[3];

                    gl.uniform4f(ud["${k}"].location, v[0], v[1], v[2], v[3])
                }`}]}
goog.provide("module$node_modules$$pixi$core$lib$shader$utils$uniformParsers");
goog.global. module$node_modules$$pixi$core$lib$shader$utils$uniformParsers=shadow.js.require(107, {});
