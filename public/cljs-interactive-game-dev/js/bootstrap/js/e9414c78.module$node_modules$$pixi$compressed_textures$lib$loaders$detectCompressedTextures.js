shadow$provide[309]=function(r,l,A,p){function k(){c={s3tc:d.getExtension("WEBGL_compressed_texture_s3tc"),s3tc_sRGB:d.getExtension("WEBGL_compressed_texture_s3tc_srgb"),etc:d.getExtension("WEBGL_compressed_texture_etc"),etc1:d.getExtension("WEBGL_compressed_texture_etc1"),pvrtc:d.getExtension("WEBGL_compressed_texture_pvrtc")||d.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),atc:d.getExtension("WEBGL_compressed_texture_atc"),astc:d.getExtension("WEBGL_compressed_texture_astc"),bptc:d.getExtension("EXT_texture_compression_bptc")}}
var m=l(209);let d,c;r={extension:{type:m.ExtensionType.DetectionParser,priority:2},test:async()=>{const a=m.settings.ADAPTER.createCanvas().getContext("webgl");return a?(d=a,!0):(console.warn("WebGL not available for compressed textures."),!1)},add:async a=>{c||k();const b=[];for(const e in c)c[e]&&b.push(e);return[...b,...a]},remove:async a=>(c||k(),a.filter(b=>!(b in c)))};m.extensions.add(r);p.detectCompressedTextures=r}
goog.provide("module$node_modules$$pixi$compressed_textures$lib$loaders$detectCompressedTextures");
goog.global. module$node_modules$$pixi$compressed_textures$lib$loaders$detectCompressedTextures=shadow.js.require(309, {});
