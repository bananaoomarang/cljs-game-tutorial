shadow$provide[285]=function(r,l,A,p){var k=l(209),m=l(260),d=l(268),c=l(269);l(283);var a=l(284),b=l(263),e=l(266),g=l(278);class f{constructor(){this._detections=[];this._initialized=!1;this.resolver=new a.Resolver;this.loader=new c.Loader;this.cache=d.Cache;this._backgroundLoader=new m.BackgroundLoader(this.loader);this._backgroundLoader.active=!0;this.reset()}async init(h={}){if(this._initialized)console.warn("[Assets]AssetManager already initialized, did you load before calling this Assets.init()?");
else{if(this._initialized=!0,h.defaultSearchParams&&this.resolver.setDefaultSearchParams(h.defaultSearchParams),h.basePath&&(this.resolver.basePath=h.basePath),h.bundleIdentifier&&this.resolver.setBundleIdentifier(h.bundleIdentifier),h.manifest){var n=h.manifest;"string"==typeof n&&(n=await this.load(n));this.resolver.addManifest(n)}n=h.texturePreference?.resolution??1;n="number"==typeof n?[n]:n;var q=await this._detectFormats({preferredFormats:h.texturePreference?.format,skipDetections:h.skipDetections,
detections:this._detections});this.resolver.prefer({params:{format:q,resolution:n}});h.preferences&&this.setPreferences(h.preferences)}}add(h,n,q,t,u){this.resolver.add(h,n,q,t,u)}async load(h,n){this._initialized||await this.init();const q=e.isSingleItem(h);h=b.convertToList(h).map(u=>{if("string"!=typeof u){const v=this.resolver.getAlias(u);return v.some(x=>!this.resolver.hasKey(x))&&this.add(u),Array.isArray(v)?v[0]:v}return this.resolver.hasKey(u)||this.add({alias:u,src:u}),u});const t=this.resolver.resolve(h);
n=await this._mapLoadToResolve(t,n);return q?n[h[0]]:n}addBundle(h,n){this.resolver.addBundle(h,n)}async loadBundle(h,n){this._initialized||await this.init();let q=!1;"string"==typeof h&&(q=!0,h=[h]);const t=this.resolver.resolveBundle(h),u={};let v=0,x=0;const z=()=>{n?.(++v/x)},y=Object.keys(t).map(C=>{const B=t[C];return x+=Object.keys(B).length,this._mapLoadToResolve(B,z).then(w=>{u[C]=w})});return await Promise.all(y),q?u[h[0]]:u}async backgroundLoad(h){this._initialized||await this.init();"string"==
typeof h&&(h=[h]);h=this.resolver.resolve(h);this._backgroundLoader.add(Object.values(h))}async backgroundLoadBundle(h){this._initialized||await this.init();"string"==typeof h&&(h=[h]);h=this.resolver.resolveBundle(h);Object.values(h).forEach(n=>{this._backgroundLoader.add(Object.values(n))})}reset(){this.resolver.reset();this.loader.reset();this.cache.reset();this._initialized=!1}get(h){if("string"==typeof h)return d.Cache.get(h);const n={};for(let q=0;q<h.length;q++)n[q]=d.Cache.get(h[q]);return n}async _mapLoadToResolve(h,
n){const q=Object.values(h),t=Object.keys(h);this._backgroundLoader.active=!1;const u=await this.loader.load(q,n);this._backgroundLoader.active=!0;const v={};return q.forEach((x,z)=>{const y=u[x.src],C=[x.src];x.alias&&C.push(...x.alias);v[t[z]]=y;d.Cache.set(C,y)}),v}async unload(h){this._initialized||await this.init();h=b.convertToList(h).map(n=>"string"!=typeof n?n.src:n);h=this.resolver.resolve(h);await this._unloadFromResolved(h)}async unloadBundle(h){this._initialized||await this.init();h=b.convertToList(h);
const n=this.resolver.resolveBundle(h);h=Object.keys(n).map(q=>this._unloadFromResolved(n[q]));await Promise.all(h)}async _unloadFromResolved(h){h=Object.values(h);h.forEach(n=>{d.Cache.remove(n.src)});await this.loader.unload(h)}async _detectFormats(h){let n=[];h.preferredFormats&&(n=Array.isArray(h.preferredFormats)?h.preferredFormats:[h.preferredFormats]);for(const q of h.detections)h.skipDetections||await q.test()?n=await q.add(n):h.skipDetections||(n=await q.remove(n));return n=n.filter((q,t)=>
n.indexOf(q)===t),n}get detections(){return this._detections}get preferWorkers(){return g.loadTextures.config.preferWorkers}set preferWorkers(h){k.utils.deprecation("7.2.0","Assets.prefersWorkers is deprecated, use Assets.setPreferences({ preferWorkers: true }) instead.");this.setPreferences({preferWorkers:h})}setPreferences(h){this.loader.parsers.forEach(n=>{n.config&&Object.keys(n.config).filter(q=>q in h).forEach(q=>{n.config[q]=h[q]})})}}r=new f;k.extensions.handleByList(k.ExtensionType.LoadParser,
r.loader.parsers).handleByList(k.ExtensionType.ResolveParser,r.resolver.parsers).handleByList(k.ExtensionType.CacheParser,r.cache.parsers).handleByList(k.ExtensionType.DetectionParser,r.detections);p.Assets=r;p.AssetsClass=f}
goog.provide("module$node_modules$$pixi$assets$lib$Assets");
goog.global. module$node_modules$$pixi$assets$lib$Assets=shadow.js.require(285, {});
