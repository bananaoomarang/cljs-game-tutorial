shadow$provide[280]=function(r,l,A,p){var k=l(209),m=l(261),d=l(262);r=l(270);var c=l(277);const a=[".mp4",".m4v",".webm",".ogv"],b=["video/mp4","video/webm","video/ogg"];l={name:"loadVideo",extension:{type:k.ExtensionType.LoadParser,priority:r.LoaderParserPriority.High},config:{defaultAutoPlay:!0,defaultUpdateFPS:0,defaultLoop:!1,defaultMuted:!1,defaultPlaysinline:!0},test(e){return m.checkDataUrl(e,b)||d.checkExtension(e,a)},async load(e,g,f){let h;const n=await (await k.settings.ADAPTER.fetch(e)).blob(),
q=URL.createObjectURL(n);try{const t=new k.VideoResource(q,{autoPlay:this.config.defaultAutoPlay,updateFPS:this.config.defaultUpdateFPS,loop:this.config.defaultLoop,muted:this.config.defaultMuted,playsinline:this.config.defaultPlaysinline,...g?.data?.resourceOptions,autoLoad:!0});await t.load();const u=new k.BaseTexture(t,{alphaMode:await k.utils.detectVideoAlphaMode(),resolution:k.utils.getResolutionOfUrl(e),...g?.data});u.resource.src=e;h=c.createTexture(u,f,e);h.baseTexture.once("destroyed",()=>
{URL.revokeObjectURL(q)})}catch(t){throw URL.revokeObjectURL(q),t;}return h},unload(e){e.destroy(!0)}};k.extensions.add(l);p.loadVideo=l}
goog.provide("module$node_modules$$pixi$assets$lib$loader$parsers$textures$loadVideo");
goog.global. module$node_modules$$pixi$assets$lib$loader$parsers$textures$loadVideo=shadow.js.require(280, {});
