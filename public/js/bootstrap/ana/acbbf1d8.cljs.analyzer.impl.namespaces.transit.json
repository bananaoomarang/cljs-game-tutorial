["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/analyzer/impl/namespaces.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",34],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$cljs.analyzer.impl.namespaces","~:reader-aliases",["^ "],"~:imports",null,"~:requires",["^ ","~$cljs.core","^C","~$goog","^D"],"~:seen",["^=",[]],"~:shadow/js-access-global",["^=",["Error"]],"~:uses",null,"~:defs",["^ ","~$check-and-remove-as-alias",["^ ","~:protocol-inline",null,"^2",["^ ","^3","cljs/analyzer/impl/namespaces.cljc","^4",11,"^5",7,"^6",11,"^7",32,"~:arglists",["~#list",["~$quote",["^L",[["~$libspec"]]]]],"~:doc","Given a libspec return a map of :as-alias alias, if was present. Return the\n   libspec with :as-alias elided. If the libspec was *only* :as-alias do not\n   return it."],"^>","~$cljs.analyzer.impl.namespaces/check-and-remove-as-alias","^3","cljs/analyzer/impl/namespaces.cljc","^7",32,"~:method-params",["^L",[["^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^5",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^L",["~$defn","^I","Given a libspec return a map of :as-alias alias, if was present. Return the\n   libspec with :as-alias elided. If the libspec was *only* :as-alias do not\n   return it.",["^N"],["^L",["~$if",["^L",["~$or",["^L",["~$symbol?","^N"]],["^L",["~$keyword?","^N"]]]],["^ ","~:libspec","^N"],["^L",["~$let",[["~$lib","~$&","~$spec","~:as","^N"],"^N",["~$pre-spec",["~$_","~$alias","~$&","~$post-spec","^15","~$post"]],["^L",["~$split-with",["^L",["~$complement",["^=",["~:as-alias"]]]],"^14"]]],["^L",["^Y",["^L",["~$seq","^19"]],["^L",["^12",["~$libspec'",["^L",["~$into",["^13"],["^L",["~$concat","^16","^18"]]]]],["^L",["~$assert",["^L",["^[","^17"]],["^L",["~$str",":as-alias must be followed by a symbol, got: ","^17"]]]],["^L",["~$cond->",["^ ","^1<",["^ ","^17","^13"]],["^L",["~$>",["^L",["~$count","^1>"]],1]],["^L",["~$assoc","^11","^1>"]]]]]],["^ ","^11","^N"]]]]]]]]]],"~:variadic?",false,"^4",11,"~:ret-tag",["^=",["~$clj","~$any","~$cljs.core/IMap"]],"^6",11,"~:max-fixed-arity",1,"~:fn-var",true,"^K",["^L",["^M",["^L",[["^N"]]]]],"^O","Given a libspec return a map of :as-alias alias, if was present. Return the\n   libspec with :as-alias elided. If the libspec was *only* :as-alias do not\n   return it."],"~$check-as-alias-duplicates",["^ ","^J",null,"^2",["^ ","^3","cljs/analyzer/impl/namespaces.cljc","^4",31,"^5",7,"^6",31,"^7",32,"^K",["^L",["^M",["^L",[["~$as-aliases","~$new-as-aliases"]]]]]],"^>","~$cljs.analyzer.impl.namespaces/check-as-alias-duplicates","^3","cljs/analyzer/impl/namespaces.cljc","^7",32,"^Q",["^L",[["^1N","^1O"]]],"^R",null,"^S",["^L",[null,null]],"^5",1,"^T",["^ ","^U","^V","^W",["^L",["^X","^1M",["^1N","^1O"],["^L",["~$doseq",[["^17","~$_"],"^1O"],["^L",["^1A",["^L",["~$not",["^L",["~$contains?","^1N","^17"]]]],["^L",["^1B","Duplicate :as-alias ","^17",", already in use for lib ",["^L",["~$get","^1N","^17"]]]]]]]]]]],"^1F",false,"^4",31,"^1G","~$clj-nil","^6",31,"^1K",2,"^1L",true,"^K",["^L",["^M",["^L",[["^1N","^1O"]]]]]],"~$elide-aliases-from-libspecs",["^ ","^J",null,"^2",["^ ","^3","cljs/analyzer/impl/namespaces.cljc","^4",38,"^5",7,"^6",38,"^7",34,"^K",["^L",["^M",["^L",[["~$libspecs"],["^1W","^1N"]]]]],"^O","Given libspecs, elide all :as-alias. Return a map of :libspecs (filtered)\n   and :as-aliases.","~:top-fn",["^ ","^1F",false,"~:fixed-arity",2,"^1K",2,"^Q",[["^1W"],["^1W","^1N"]],"^K",["^L",[["^1W"],["^1W","^1N"]]],"^S",["^L",[null,null]]]],"^>","~$cljs.analyzer.impl.namespaces/elide-aliases-from-libspecs","^3","cljs/analyzer/impl/namespaces.cljc","^7",34,"^1X",["^ ","^1F",false,"^1Y",2,"^1K",2,"^Q",[["^1W"],["^1W","^1N"]],"^K",["^L",[["^1W"],["^1W","^1N"]]],"^S",["^L",[null,null]]],"^Q",[["^1W"],["^1W","^1N"]],"^R",null,"^1Y",2,"^S",["^L",[null,null]],"^5",1,"^T",["^ ","^U","^V","^W",["^L",["^X","^1V","Given libspecs, elide all :as-alias. Return a map of :libspecs (filtered)\n   and :as-aliases.",["^L",[["^1W"],["^L",["^1V","^1W",["^ "]]]]],["^L",[["^1W","^1N"],["^L",["^12",["~$ret",["^ ","~:as-aliases","^1N","~:libspecs",[]]],["^L",["~$reduce",["^L",["~$fn",["^1[","^N"],["^L",["^12",[["^ ","~:keys",["~$as-alias","^N"]],["^L",["^I","^N"]]],["^L",["^1M",["^L",["^20","^1["]],"^25"]],["^L",["^1C","^1[","^N",["^L",["~$update","^21","~$conj","^N"]],"^25",["^L",["^26","^20","~$merge","^25"]]]]]]]],"^1[","^1W"]]]]]]]]],"^1F",false,"~:methods",[["^ ","^1Y",1,"^1F",false,"~:tag","^1I"],["^ ","^1Y",2,"^1F",false,"^2:",["^=",[null,"^1I"]]]],"^4",38,"^6",38,"^1K",2,"^1L",true,"^K",["^L",[["^1W"],["^1W","^1N"]]],"^O","Given libspecs, elide all :as-alias. Return a map of :libspecs (filtered)\n   and :as-aliases."],"~$elide-aliases-from-ns-specs",["^ ","^J",null,"^2",["^ ","^3","cljs/analyzer/impl/namespaces.cljc","^4",55,"^5",7,"^6",55,"^7",34,"^K",["^L",["^M",["^L",[["~$ns-specs"]]]]]],"^>","~$cljs.analyzer.impl.namespaces/elide-aliases-from-ns-specs","^3","cljs/analyzer/impl/namespaces.cljc","^7",34,"^Q",["^L",[["^2<"]]],"^R",null,"^S",["^L",[null,null]],"^5",1,"^T",["^ ","^U","^V","^W",["^L",["^X","^2;",["^2<"],"Given ns specs, elide all :as-alias. Return a map of :libspecs (filtered)\n   and :as-aliases.",["^L",["^12",["^1[",["^ ","^20",["^ "],"^21",[]]],["^L",["^22",["^L",["^23",[["^ ","^24",["^1N"],"^15","^1["],["~$spec-key","~$&","^1W"]],["^L",["~$if-not",["^L",["~$=","~:refer-clojure","^2>"]],["^L",["^12",[["^ ","^24",["^1N","^1W"]],["^L",["^1V","^1W","^1N"]]],["^L",["^1C","^1[",["^L",["^1R",["^L",["~$empty?","^1N"]]]],["^L",["^26","^20","^28","^1N"]],["^L",["^1R",["^L",["^2A","^1W"]]]],["^L",["^26","^21","^27",["^L",["~$list*","^2>","^1W"]]]]]]]],["^L",["^26","^1[","^21","^27",["^L",["^2B","^2>","^1W"]]]]]]]],"^1[","^2<"]]]]]]],"^1F",false,"^4",55,"^1G",["^=",[null,"^1I"]],"^6",55,"^1K",1,"^1L",true,"^K",["^L",["^M",["^L",[["^2<"]]]]]]],"~:require-macros",["^ ","^C","^C"],"~:cljs.analyzer/constants",["^ ","^E",["^=",["^1<","^11","^2@","^21","^20"]],"~:order",["^11","^1<","^20","^21","^2@"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^D","^C"]]