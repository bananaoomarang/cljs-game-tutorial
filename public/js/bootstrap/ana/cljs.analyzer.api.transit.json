["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.","~:file","cljs/analyzer/api.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",null,"~:excludes",["~#set",["~$find-ns","~$remove-ns","~$ns-publics","~$ns-resolve","~$ns-interns","~$all-ns","~$resolve"]],"~:name","~$cljs.analyzer.api","~:reader-aliases",["^ "],"~:imports",null,"~:requires",["^ ","~$cljs.analyzer","^K","~$ana","^K","~$cljs.env","^M","~$env","^M","~$cljs.core","^O","~$goog","^P"],"~:seen",["^>",["~:require"]],"~:shadow/js-access-global",["^>",["Error"]],"~:uses",null,"~:defs",["^ ","^?",["^ ","~:protocol-inline",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",221,"^6",7,"^7",221,"^8",14,"~:arglists",["~#list",["~$quote",["^X",[["~$sym"],["~$state","^Z"]]]]],"^3","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^Z"],["^[","^Z"]],"^W",["^X",[["^Z"],["^[","^Z"]]],"~:arglists-meta",["^X",[null,null]]]],"^F","~$cljs.analyzer.api/find-ns","^4","cljs/analyzer/api.cljc","^8",14,"^10",["^ ","^11",false,"^12",2,"^13",2,"^14",[["^Z"],["^[","^Z"]],"^W",["^X",[["^Z"],["^[","^Z"]]],"^15",["^X",[null,null]]],"^14",[["^Z"],["^[","^Z"]],"~:protocol-impl",null,"^12",2,"^15",["^X",[null,null]],"^6",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^X",["~$defn","^?","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.",["^X",[["^Z"],["^X",["^?","~$env/*compiler*","^Z"]]]],["^X",[["^[","^Z"],["^ ","~:pre",[["^X",["~$symbol?","^Z"]]]],["^X",["~$get-in",["^X",["~$clojure.core/deref","^["]],["~:cljs.analyzer/namespaces","^Z"]]]]]]]],"^11",false,"~:methods",[["^ ","^12",1,"^11",false,"~:tag","~$any"],["^ ","^12",2,"^11",false,"^1D","^1E"]],"^5",221,"^7",221,"^13",2,"~:fn-var",true,"^W",["^X",[["^Z"],["^[","^Z"]]],"^3","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns."],"^@",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",263,"^6",7,"^7",263,"^8",16,"^W",["^X",["^Y",["^X",[["~$ns"],["^[","^1G"]]]]],"^3","Removes the namespace named by the symbol.","^10",["^ ","^11",false,"^12",2,"^13",2,"^14",[["^1G"],["^[","^1G"]],"^W",["^X",[["^1G"],["^[","^1G"]]],"^15",["^X",[null,null]]]],"^F","~$cljs.analyzer.api/remove-ns","^4","cljs/analyzer/api.cljc","^8",16,"^10",["^ ","^11",false,"^12",2,"^13",2,"^14",[["^1G"],["^[","^1G"]],"^W",["^X",[["^1G"],["^[","^1G"]]],"^15",["^X",[null,null]]],"^14",[["^1G"],["^[","^1G"]],"^17",null,"^12",2,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^@","Removes the namespace named by the symbol.",["^X",[["^1G"],["^X",["^@","^1=","^1G"]]]],["^X",[["^[","^1G"],["^ ","^1>",[["^X",["^1?","^1G"]]]],["^X",["~$swap!","^[","~$update-in",["^1B"],"~$dissoc","^1G"]]]]]]],"^11",false,"^1C",[["^ ","^12",1,"^11",false,"^1D","^1E"],["^ ","^12",2,"^11",false,"^1D",["^>",[null,"^1E"]]]],"^5",263,"^7",263,"^13",2,"^1F",true,"^W",["^X",[["^1G"],["^[","^1G"]]],"^3","Removes the namespace named by the symbol."],"^A",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",241,"^6",7,"^7",241,"^8",17,"^W",["^X",["^Y",["^X",[["^1G"],["^[","^1G"]]]]],"^3","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.","^10",["^ ","^11",false,"^12",2,"^13",2,"^14",[["^1G"],["^[","^1G"]],"^W",["^X",[["^1G"],["^[","^1G"]]],"^15",["^X",[null,null]]]],"^F","~$cljs.analyzer.api/ns-publics","^4","cljs/analyzer/api.cljc","^8",17,"^10",["^ ","^11",false,"^12",2,"^13",2,"^14",[["^1G"],["^[","^1G"]],"^W",["^X",[["^1G"],["^[","^1G"]]],"^15",["^X",[null,null]]],"^14",[["^1G"],["^[","^1G"]],"^17",null,"^12",2,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^A","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.",["^X",[["^1G"],["^X",["^A","^1=","^1G"]]]],["^X",[["^[","^1G"],["^ ","^1>",[["^X",["^1?","^1G"]]]],["^X",["~$->>",["^X",["~$merge",["^X",["^1@",["^X",["^1A","^["]],["^1B","^1G","~:macros"]]],["^X",["^1@",["^X",["^1A","^["]],["^1B","^1G","^U"]]]]],["^X",["~$remove",["^X",["~$fn",[["~$k","~$v"]],["^X",["~:private","~$v"]]]]]],["^X",["~$into",["^ "]]]]]]]]]],"^11",false,"^1C",[["^ ","^12",1,"^11",false,"^1D","^1E"],["^ ","^12",2,"^11",false,"^1D",["^>",[null,"~$clj","^1E"]]]],"^5",241,"^7",241,"^13",2,"^1F",true,"^W",["^X",[["^1G"],["^[","^1G"]]],"^3","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars."],"~$get-options",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",102,"^6",7,"^7",102,"^8",18,"^W",["^X",["^Y",["^X",[[],["^["]]]]],"^3","Return the compiler options from compiler state.","^10",["^ ","^11",false,"^12",1,"^13",1,"^14",[[],["^["]],"^W",["^X",[[],["^["]]],"^15",["^X",[null,null]]]],"^F","~$cljs.analyzer.api/get-options","^4","cljs/analyzer/api.cljc","^8",18,"^10",["^ ","^11",false,"^12",1,"^13",1,"^14",[[],["^["]],"^W",["^X",[[],["^["]]],"^15",["^X",[null,null]]],"^14",[[],["^["]],"^17",null,"^12",1,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^1U","Return the compiler options from compiler state.",["^X",[[],["^X",["^1U",["^X",["~$current-state"]]]]]],["^X",[["^["],["^X",["~$get",["^X",["^1A","^["]],"~:options"]]]]]]],"^11",false,"^1C",[["^ ","^12",0,"^11",false,"^1D","^1E"],["^ ","^12",1,"^11",false,"^1D",["^>",["^1E","~$clj-nil"]]]],"^5",102,"^7",102,"^13",1,"^1F",true,"^W",["^X",[[],["^["]]],"^3","Return the compiler options from compiler state."],"~$warning-message",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",91,"^6",7,"^7",91,"^8",22,"^W",["^X",["^Y",["^X",[["~$warn-type","~$warn-info"]]]]],"^3","Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers."],"^F","~$cljs.analyzer.api/warning-message","^4","cljs/analyzer/api.cljc","^8",22,"^14",["^X",[["^20","^21"]]],"^17",null,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^1[","Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers.",["^20","^21"],["^X",["~$ana/error-message","^20","^21"]]]]],"^11",false,"^5",91,"~:ret-tag","^1E","^7",91,"^13",2,"^1F",true,"^W",["^X",["^Y",["^X",[["^20","^21"]]]]],"^3","Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers."],"~$warning-enabled?",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",69,"^6",7,"^7",69,"^8",23,"^W",["^X",["^Y",["^X",[["~$warning-type"]]]]],"^3","Test if the given warning-type is enabled."],"^F","~$cljs.analyzer.api/warning-enabled?","^4","cljs/analyzer/api.cljc","^8",23,"^14",["^X",[["^26"]]],"^17",null,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^25","Test if the given warning-type is enabled.",["^26"],["^X",["~$ana/*cljs-warnings*","^26"]]]]],"^11",false,"^5",69,"^24","^1E","^7",69,"^13",1,"^1F",true,"^W",["^X",["^Y",["^X",[["^26"]]]]],"^3","Test if the given warning-type is enabled."],"^1W",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",36,"^6",7,"^7",36,"^8",20,"^W",["^X",["^Y",["^X",[[]]]]],"^3","Return the current compiler state atom."],"^F","~$cljs.analyzer.api/current-state","^4","cljs/analyzer/api.cljc","^8",20,"^14",["^X",[[]]],"^17",null,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^1W","Return the current compiler state atom.",[],"^1="]]],"^11",false,"^5",36,"^24","^1E","^7",36,"^13",0,"^1F",true,"^W",["^X",["^Y",["^X",[[]]]]],"^3","Return the current compiler state atom."],"^B",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",254,"^6",7,"^7",254,"^8",17,"^W",["^X",["^Y",["^X",[["^1G","^Z"],["^[","^1G","^Z"]]]]],"^3","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.","^10",["^ ","^11",false,"^12",3,"^13",3,"^14",[["^1G","^Z"],["^[","^1G","^Z"]],"^W",["^X",[["^1G","^Z"],["^[","^1G","^Z"]]],"^15",["^X",[null,null]]]],"^F","~$cljs.analyzer.api/ns-resolve","^4","cljs/analyzer/api.cljc","^8",17,"^10",["^ ","^11",false,"^12",3,"^13",3,"^14",[["^1G","^Z"],["^[","^1G","^Z"]],"^W",["^X",[["^1G","^Z"],["^[","^1G","^Z"]]],"^15",["^X",[null,null]]],"^14",[["^1G","^Z"],["^[","^1G","^Z"]],"^17",null,"^12",3,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^B","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.",["^X",[["^1G","^Z"],["^X",["^B","^1=","^1G","^Z"]]]],["^X",[["^[","^1G","^Z"],["^ ","^1>",[["^X",["^1?","^1G"]],["^X",["^1?","^Z"]]]],["^X",["^1@",["^X",["^1A","^["]],["^1B","^1G","^U","^Z"]]]]]]]],"^11",false,"^1C",[["^ ","^12",2,"^11",false,"^1D","^1E"],["^ ","^12",3,"^11",false,"^1D","^1E"]],"^5",254,"^7",254,"^13",3,"^1F",true,"^W",["^X",[["^1G","^Z"],["^[","^1G","^Z"]]],"^3","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var."],"~$enabled-warnings",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",97,"^6",7,"^7",97,"^8",23,"^W",["^X",["^Y",["^X",[[]]]]],"^3","Get the enabled warning types."],"^F","~$cljs.analyzer.api/enabled-warnings","^4","cljs/analyzer/api.cljc","^8",23,"^14",["^X",[[]]],"^17",null,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^2;","Get the enabled warning types.",[],"^28"]]],"^11",false,"^5",97,"^24","^1E","^7",97,"^13",0,"^1F",true,"^W",["^X",["^Y",["^X",[[]]]]],"^3","Get the enabled warning types."],"~$empty-state",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",25,"^6",7,"^7",25,"^8",18,"^W",["^X",["^Y",["^X",[[],["~$opts"]]]]],"^3","Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options","^10",["^ ","^11",false,"^12",1,"^13",1,"^14",[[],["^2>"]],"^W",["^X",[[],["^2>"]]],"^15",["^X",[null,null]]]],"^F","~$cljs.analyzer.api/empty-state","^4","cljs/analyzer/api.cljc","^8",18,"^10",["^ ","^11",false,"^12",1,"^13",1,"^14",[[],["^2>"]],"^W",["^X",[[],["^2>"]]],"^15",["^X",[null,null]]],"^14",[[],["^2>"]],"^17",null,"^12",1,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^2=","Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options",["^X",[[],["^X",["~$if-not",["^X",["~$nil?","^1="]],"^1=",["^X",["~$env/default-compiler-env"]]]]]],["^X",[["^2>"],["^X",["^2B","^2>"]]]]]]],"^11",false,"^1C",[["^ ","^12",0,"^11",false,"^1D","^1E"],["^ ","^12",1,"^11",false,"^1D","~$cljs.core/Atom"]],"^5",25,"^7",25,"^13",1,"^1F",true,"^W",["^X",[[],["^2>"]]],"^3","Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options"],"~$default-passes",["^ ","^2",["^ ","^4","cljs/analyzer/api.cljc","^5",117,"^6",3,"^7",117,"^8",17,"^3","ClojureScript's default analysis passes."],"^F","~$cljs.analyzer.api/default-passes","^4","cljs/analyzer/api.cljc","^8",17,"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["~$def","^2D","~$ana/default-passes"]]],"^5",115,"^7",117,"^1D","~$cljs.core/IVector","^3","ClojureScript's default analysis passes."],"~$empty-env",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",57,"^6",7,"^7",57,"^8",16,"^W",["^X",["^Y",["^X",[[]]]]],"^3","Creates an empty analysis environment."],"^F","~$cljs.analyzer.api/empty-env","^4","cljs/analyzer/api.cljc","^8",16,"^14",["^X",[[]]],"^17",null,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^2I","Creates an empty analysis environment.",[],["^X",["~$ana/empty-env"]]]]],"^11",false,"^5",57,"^24","^1E","^7",57,"^13",0,"^1F",true,"^W",["^X",["^Y",["^X",[[]]]]],"^3","Creates an empty analysis environment."],"~$default-warning-handler",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",74,"^6",7,"^7",74,"^8",30,"^W",["^X",["^Y",["^X",[["^26","^N","~$extra"]]]]],"^3","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^F","~$cljs.analyzer.api/default-warning-handler","^4","cljs/analyzer/api.cljc","^8",30,"^14",["^X",[["^26","^N","^2M"]]],"^17",null,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^2L","The default warning handler.\n\n   Outputs the warning messages to *err*.",["^26","^N","^2M"],["^X",["~$ana/default-warning-handler","^26","^N","^2M"]]]]],"^11",false,"^5",74,"^24",["^>",[null,"^1Z"]],"^7",74,"^13",3,"^1F",true,"^W",["^X",["^Y",["^X",[["^26","^N","^2M"]]]]],"^3","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^C",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",230,"^6",7,"^7",230,"^8",17,"^W",["^X",["^Y",["^X",[["^1G"],["^[","^1G"]]]]],"^3","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.","^10",["^ ","^11",false,"^12",2,"^13",2,"^14",[["^1G"],["^[","^1G"]],"^W",["^X",[["^1G"],["^[","^1G"]]],"^15",["^X",[null,null]]]],"^F","~$cljs.analyzer.api/ns-interns","^4","cljs/analyzer/api.cljc","^8",17,"^10",["^ ","^11",false,"^12",2,"^13",2,"^14",[["^1G"],["^[","^1G"]],"^W",["^X",[["^1G"],["^[","^1G"]]],"^15",["^X",[null,null]]],"^14",[["^1G"],["^[","^1G"]],"^17",null,"^12",2,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^C","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.",["^X",[["^1G"],["^X",["^C","^1=","^1G"]]]],["^X",[["^[","^1G"],["^ ","^1>",[["^X",["^1?","^1G"]]]],["^X",["^1N",["^X",["^1@",["^X",["^1A","^["]],["^1B","^1G","^1O"]]],["^X",["^1@",["^X",["^1A","^["]],["^1B","^1G","^U"]]]]]]]]]],"^11",false,"^1C",[["^ ","^12",1,"^11",false,"^1D","^1E"],["^ ","^12",2,"^11",false,"^1D",["^>",["^1E","^1Z"]]]],"^5",230,"^7",230,"^13",2,"^1F",true,"^W",["^X",[["^1G"],["^[","^1G"]]],"^3","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars."],"^D",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",213,"^6",7,"^7",213,"^8",13,"^W",["^X",["^Y",["^X",[[],["^["]]]]],"^3","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.","^10",["^ ","^11",false,"^12",1,"^13",1,"^14",[[],["^["]],"^W",["^X",[[],["^["]]],"^15",["^X",[null,null]]]],"^F","~$cljs.analyzer.api/all-ns","^4","cljs/analyzer/api.cljc","^8",13,"^10",["^ ","^11",false,"^12",1,"^13",1,"^14",[[],["^["]],"^W",["^X",[[],["^["]]],"^15",["^X",[null,null]]],"^14",[[],["^["]],"^17",null,"^12",1,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^D","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.",["^X",[[],["^X",["^D","^1="]]]],["^X",[["^["],["^X",["~$keys",["^X",["^1X",["^X",["^1A","^["]],"^1B"]]]]]]]]],"^11",false,"^1C",[["^ ","^12",0,"^11",false,"^1D","^1E"],["^ ","^12",1,"^11",false,"^1D",["^>",["~$cljs.core/KeySeq","^1Z"]]]],"^5",213,"^7",213,"^13",1,"^1F",true,"^W",["^X",[[],["^["]]],"^3","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances."],"~$current-file",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",41,"^6",7,"^7",41,"^8",19,"^W",["^X",["^Y",["^X",[[]]]]],"^3","Return the current file under analysis or compilation."],"^F","~$cljs.analyzer.api/current-file","^4","cljs/analyzer/api.cljc","^8",19,"^14",["^X",[[]]],"^17",null,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^2T","Return the current file under analysis or compilation.",[],"~$ana/*cljs-file*"]]],"^11",false,"^5",41,"^24","^1E","^7",41,"^13",0,"^1F",true,"^W",["^X",["^Y",["^X",[[]]]]],"^3","Return the current file under analysis or compilation."],"~$current-ns",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",46,"^6",7,"^7",46,"^8",17,"^W",["^X",["^Y",["^X",[[]]]]],"^3","Return the current ns under analysis or compilation."],"^F","~$cljs.analyzer.api/current-ns","^4","cljs/analyzer/api.cljc","^8",17,"^14",["^X",[[]]],"^17",null,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^2W","Return the current ns under analysis or compilation.",[],"~$ana/*cljs-ns*"]]],"^11",false,"^5",46,"^24","^1E","^7",46,"^13",0,"^1F",true,"^W",["^X",["^Y",["^X",[[]]]]],"^3","Return the current ns under analysis or compilation."],"^E",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",201,"^6",7,"^7",201,"^8",14,"^W",["^X",["^Y",["^X",[["^N","^Z"]]]]],"^3","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"^F","~$cljs.analyzer.api/resolve","^4","cljs/analyzer/api.cljc","^8",14,"^14",["^X",[["^N","^Z"]]],"^17",null,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^E","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve",["^N","^Z"],["^ ","^1>",[["^X",["~$map?","^N"]],["^X",["^1?","^Z"]]]],["^X",["~$try",["^X",["~$binding",["~$ana/*private-var-access-nowarn*",true],["^X",["~$ana/resolve-var","^N","^Z",["^X",["~$ana/confirm-var-exists-throw"]]]]]],["^X",["~$catch","~:default","~$e",["^X",["~$ana/resolve-macro-var","^N","^Z"]]]]]]]]],"^11",false,"^5",201,"^7",201,"^13",2,"^1F",true,"^W",["^X",["^Y",["^X",[["^N","^Z"]]]]],"^3","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"~$get-js-index",["^ ","^V",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",108,"^6",7,"^7",108,"^8",19,"^W",["^X",["^Y",["^X",[[],["^["]]]]],"^3","Return the currently computed Google Closure js dependency index from the\n  compiler state.","^10",["^ ","^11",false,"^12",1,"^13",1,"^14",[[],["^["]],"^W",["^X",[[],["^["]]],"^15",["^X",[null,null]]]],"^F","~$cljs.analyzer.api/get-js-index","^4","cljs/analyzer/api.cljc","^8",19,"^10",["^ ","^11",false,"^12",1,"^13",1,"^14",[[],["^["]],"^W",["^X",[[],["^["]]],"^15",["^X",[null,null]]],"^14",[[],["^["]],"^17",null,"^12",1,"^15",["^X",[null,null]],"^6",1,"^18",["^ ","^19","^1:","^1;",["^X",["^1<","^38","Return the currently computed Google Closure js dependency index from the\n  compiler state.",["^X",[[],["^X",["^38",["^X",["^1W"]]]]]],["^X",[["^["],["^X",["^1X",["^X",["^1A","^["]],"~:js-dependency-index"]]]]]]],"^11",false,"^1C",[["^ ","^12",0,"^11",false,"^1D","^1E"],["^ ","^12",1,"^11",false,"^1D",["^>",["^1E","^1Z"]]]],"^5",108,"^7",108,"^13",1,"^1F",true,"^W",["^X",[[],["^["]]],"^3","Return the currently computed Google Closure js dependency index from the\n  compiler state."]],"~:require-macros",["^ ","^O","^O"],"~:cljs.analyzer/constants",["^ ","^Q",["^>",["^1B","^1R","^1O","^3:","^U","^1Y"]],"~:order",["^1Y","^3:","^1B","^1O","^U","^1R"]],"~:flags",["^ ","^R",["^>",[]]],"~:js-deps",["^ "],"~:deps",["^P","^O","^K","^M"]]