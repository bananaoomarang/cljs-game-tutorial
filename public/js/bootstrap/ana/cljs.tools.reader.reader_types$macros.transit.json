["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/tools/reader/reader_types$macros.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",35],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$cljs.tools.reader.reader-types$macros","~:reader-aliases",["^ "],"~:imports",null,"~:requires",["^ ","~$cljs.core","^C","~$goog","^D"],"~:seen",["^=",[]],"~:uses",null,"~:defs",["^ ","~$log-source",["^ ","~:protocol-inline",null,"^2",["^ ","^3","cljs/tools/reader/reader_types$macros.cljc","^7",21,"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",["~#list",[["^O",["~$reader","~$body"]]]],"~:arglists",["^O",[["^P","~$&","^Q"]]],"~:arglists-meta",["^O",[null]]],"^5",11,"^4",3,"~:macro",true,"^6",3,"^R",["^O",["~$quote",["^O",[["^P","~$&","^Q"]]]]],"~:doc","If reader is a SourceLoggingPushbackReader, execute body in a source\n  logging context. Otherwise, execute body, returning the result."],"^>","~$cljs.tools.reader.reader-types$macros/log-source","^3","cljs/tools/reader/reader_types$macros.cljc","^7",21,"^J",["^ ","^K",true,"^L",1,"^M",1,"^N",["^O",[["^O",["^P","^Q"]]]],"^R",["^O",[["^P","~$&","^Q"]]],"^S",["^O",[null]]],"^N",["^O",[["^O",["^P","^Q"]]]],"~:protocol-impl",null,"^L",1,"^S",["^O",[null]],"^5",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^O",["~$defmacro","^H","If reader is a SourceLoggingPushbackReader, execute body in a source\n  logging context. Otherwise, execute body, returning the result.",["^P","~$&","^Q"],["^O",["~$clojure.core/sequence",["^O",["~$clojure.core/seq",["^O",["~$clojure.core/concat",["^O",["~$clojure.core/list",["^O",["^U","~$if"]]]],["^O",["^15",["^O",["^12",["^O",["^13",["^O",["^14",["^O",["^15",["^O",["^U","~$cljs.core/and"]]]],["^O",["^15",["^O",["^12",["^O",["^13",["^O",["^14",["^O",["^15",["^O",["^U","~$cljs.tools.reader.reader-types/source-logging-reader?"]]]],["^O",["^15","^P"]]]]]]]]]],["^O",["^15",["^O",["^12",["^O",["^13",["^O",["^14",["^O",["^15",["^O",["^U","~$cljs.core/not"]]]],["^O",["^15",["^O",["^12",["^O",["^13",["^O",["^14",["^O",["^15",["^O",["^U","~$cljs.tools.reader.impl.utils/whitespace?"]]]],["^O",["^15",["^O",["^12",["^O",["^13",["^O",["^14",["^O",["^15",["^O",["^U","~$cljs.tools.reader.reader-types/peek-char"]]]],["^O",["^15","^P"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],["^O",["^15",["^O",["^12",["^O",["^13",["^O",["^14",["^O",["^15",["^O",["^U","~$cljs.tools.reader.reader-types/log-source*"]]]],["^O",["^15","^P"]],["^O",["^15",["^O",["^12",["^O",["^13",["^O",["^14",["^O",["^15",["^O",["~$clojure.core/with-meta",["^O",["^U","~$fn*"]],["^O",["~$clojure.core/apply","~$clojure.core/array-map",["^O",["^12",["^O",["^13",["^O",["^14",["^O",["^15","^3"]],["^O",["^15","cljs/tools/reader/reader_types$macros.cljc"]],["^O",["^15","^4"]],["^O",["^15",9]],["^O",["^15","^5"]],["^O",["^15",35]],["^O",["^15","^6"]],["^O",["^15",9]],["^O",["^15","^7"]],["^O",["^15",38]],["^O",["^15","~:once"]],["^O",["^15",true]]]]]]]]]]]]]],["^O",["^15",["^O",["~$clojure.core/vec",["^O",["^12",["^O",["^13",["^O",["^14"]]]]]]]]]],"^Q"]]]]]]]]]]]]]]]],["^O",["^15",["^O",["^12",["^O",["^13",["^O",["^14",["^O",["^15",["^O",["^U","~$do"]]]],"^Q"]]]]]]]]]]]]]]]]],"^K",true,"~:methods",[["^ ","^L",1,"^K",true,"~:tag",["^=",["~$seq","~$cljs.core/IList"]]]],"^4",3,"^T",true,"~:ret-tag","~$any","^6",3,"^M",1,"~:fn-var",false,"^R",["^O",[["^P","~$&","^Q"]]],"^V","If reader is a SourceLoggingPushbackReader, execute body in a source\n  logging context. Otherwise, execute body, returning the result."]],"~:require-macros",["^ ","^C","^C"],"~:cljs.analyzer/constants",["^ ","^E",["^=",["^1:","^3","^7","^1C","^16","^5","^4","^1>","^1A","^1<","^1;","^18","^6","^19","^17"]],"~:order",["^16","^17","^18","^19","^1:","^1;","^1<","^1>","^1A","^3","^4","^5","^6","^7","^1C"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^D","^C"]]