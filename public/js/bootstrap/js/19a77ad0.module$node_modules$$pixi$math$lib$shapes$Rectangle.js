shadow$provide[91]=function(r,l,A,p){var k=l(89);r=l(90);const m=[new r.Point,new r.Point,new r.Point,new r.Point];class d{constructor(c=0,a=0,b=0,e=0){this.x=Number(c);this.y=Number(a);this.width=Number(b);this.height=Number(e);this.type=k.SHAPES.RECT}get left(){return this.x}get right(){return this.x+this.width}get top(){return this.y}get bottom(){return this.y+this.height}static get EMPTY(){return new d(0,0,0,0)}clone(){return new d(this.x,this.y,this.width,this.height)}copyFrom(c){return this.x=
c.x,this.y=c.y,this.width=c.width,this.height=c.height,this}copyTo(c){return c.x=this.x,c.y=this.y,c.width=this.width,c.height=this.height,c}contains(c,a){return 0>=this.width||0>=this.height?!1:c>=this.x&&c<this.x+this.width&&a>=this.y&&a<this.y+this.height}intersects(c,a){if(!a)return(this.right>c.right?c.right:this.right)<=(this.x<c.x?c.x:this.x)?!1:(this.bottom>c.bottom?c.bottom:this.bottom)>(this.y<c.y?c.y:this.y);var b=this.left,e=this.right,g=this.top;const f=this.bottom;if(e<=b||f<=g)return!1;
const h=m[0].set(c.left,c.top);var n=m[1].set(c.left,c.bottom),q=m[2].set(c.right,c.top);c=m[3].set(c.right,c.bottom);if(q.x<=h.x||n.y<=h.y)return!1;var t=Math.sign(a.a*a.d-a.b*a.c);if(0===t||(a.apply(h,h),a.apply(n,n),a.apply(q,q),a.apply(c,c),Math.max(h.x,n.x,q.x,c.x)<=b||Math.min(h.x,n.x,q.x,c.x)>=e||Math.max(h.y,n.y,q.y,c.y)<=g||Math.min(h.y,n.y,q.y,c.y)>=f))return!1;a=t*(n.y-h.y);n=t*(h.x-n.x);const u=a*b+n*g,v=a*e+n*g,x=a*b+n*f,z=a*e+n*f;if(Math.max(u,v,x,z)<=a*h.x+n*h.y||Math.min(u,v,x,z)>=
a*c.x+n*c.y)return!1;a=t*(h.y-q.y);q=t*(q.x-h.x);t=a*b+q*g;g=a*e+q*g;b=a*b+q*f;e=a*e+q*f;return!(Math.max(t,g,b,e)<=a*h.x+q*h.y||Math.min(t,g,b,e)>=a*c.x+q*c.y)}pad(c=0,a=c){return this.x-=c,this.y-=a,this.width+=2*c,this.height+=2*a,this}fit(c){const a=Math.max(this.x,c.x),b=Math.min(this.x+this.width,c.x+c.width),e=Math.max(this.y,c.y);c=Math.min(this.y+this.height,c.y+c.height);return this.x=a,this.width=Math.max(b-a,0),this.y=e,this.height=Math.max(c-e,0),this}ceil(c=1,a=.001){const b=Math.ceil((this.x+
this.width-a)*c)/c,e=Math.ceil((this.y+this.height-a)*c)/c;return this.x=Math.floor((this.x+a)*c)/c,this.y=Math.floor((this.y+a)*c)/c,this.width=b-this.x,this.height=e-this.y,this}enlarge(c){const a=Math.min(this.x,c.x),b=Math.max(this.x+this.width,c.x+c.width),e=Math.min(this.y,c.y);c=Math.max(this.y+this.height,c.y+c.height);return this.x=a,this.width=b-a,this.y=e,this.height=c-e,this}}d.prototype.toString=function(){return`[@pixi/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`};
p.Rectangle=d}
goog.provide("module$node_modules$$pixi$math$lib$shapes$Rectangle");
goog.global. module$node_modules$$pixi$math$lib$shapes$Rectangle=shadow.js.require(91, {});
