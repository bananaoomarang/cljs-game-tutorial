shadow$provide[358]=function(r,l,A,p){var k=l(209),m=l(355),d=l(356),c=l(357);class a extends k.ObjectRenderer{constructor(b){super(b);this.properties=this.shader=null;this.tempMatrix=new k.Matrix;this.properties=[{attributeName:"aVertexPosition",size:2,uploadFunction:this.uploadVertices,offset:0},{attributeName:"aPositionCoord",size:2,uploadFunction:this.uploadPosition,offset:0},{attributeName:"aRotation",size:1,uploadFunction:this.uploadRotation,offset:0},{attributeName:"aTextureCoord",size:2,uploadFunction:this.uploadUvs,
offset:0},{attributeName:"aColor",size:1,type:k.TYPES.UNSIGNED_BYTE,uploadFunction:this.uploadTint,offset:0}];this.shader=k.Shader.from(c.default,d.default,{});this.state=k.State.for2d()}render(b){const e=b.children;var g=b._maxSize;const f=b._batchSize,h=this.renderer;let n=e.length;if(0!==n){n>g&&!b.autoResize&&(n=g);(g=b._buffers)||(g=b._buffers=this.generateBuffers(b));var q=e[0]._texture.baseTexture,t=0<q.alphaMode;this.state.blendMode=k.utils.correctBlendMode(b.blendMode,t);h.state.set(this.state);
var u=h.gl,v=b.worldTransform.copyTo(this.tempMatrix);v.prepend(h.globalUniforms.uniforms.projectionMatrix);this.shader.uniforms.translationMatrix=v.toArray(!0);this.shader.uniforms.uColor=k.Color.shared.setValue(b.tintRgb).premultiply(b.worldAlpha,t).toArray(this.shader.uniforms.uColor);this.shader.uniforms.uSampler=q;this.renderer.shader.bind(this.shader);q=!1;for(let x=0,z=0;x<n;x+=f,z+=1){t=n-x;t>f&&(t=f);z>=g.length&&g.push(this._generateOneMoreBuffer(b));v=g[z];v.uploadDynamic(e,x,t);const y=
b._bufferUpdateIDs[z]||0;(q=q||v._updateID<y)&&(v._updateID=b._updateID,v.uploadStatic(e,x,t));h.geometry.bind(v.geometry);u.drawElements(u.TRIANGLES,6*t,u.UNSIGNED_SHORT,0)}}}generateBuffers(b){const e=[],g=b._maxSize,f=b._batchSize;b=b._properties;for(let h=0;h<g;h+=f)e.push(new m.ParticleBuffer(this.properties,b,f));return e}_generateOneMoreBuffer(b){return new m.ParticleBuffer(this.properties,b._properties,b._batchSize)}uploadVertices(b,e,g,f,h,n){let q=0,t=0,u=0,v=0;for(let z=0;z<g;++z){const y=
b[e+z];var x=y._texture;const C=y.scale.x,B=y.scale.y,w=x.trim;x=x.orig;w?(t=w.x-y.anchor.x*x.width,q=t+w.width,v=w.y-y.anchor.y*x.height,u=v+w.height):(q=x.width*(1-y.anchor.x),t=x.width*-y.anchor.x,u=x.height*(1-y.anchor.y),v=x.height*-y.anchor.y);f[n]=t*C;f[n+1]=v*B;f[n+h]=q*C;f[n+h+1]=v*B;f[n+2*h]=q*C;f[n+2*h+1]=u*B;f[n+3*h]=t*C;f[n+3*h+1]=u*B;n+=4*h}}uploadPosition(b,e,g,f,h,n){for(let q=0;q<g;q++){const t=b[e+q].position;f[n]=t.x;f[n+1]=t.y;f[n+h]=t.x;f[n+h+1]=t.y;f[n+2*h]=t.x;f[n+2*h+1]=t.y;
f[n+3*h]=t.x;f[n+3*h+1]=t.y;n+=4*h}}uploadRotation(b,e,g,f,h,n){for(let q=0;q<g;q++){const t=b[e+q].rotation;f[n]=t;f[n+h]=t;f[n+2*h]=t;f[n+3*h]=t;n+=4*h}}uploadUvs(b,e,g,f,h,n){for(let q=0;q<g;++q){const t=b[e+q]._texture._uvs;t?(f[n]=t.x0,f[n+1]=t.y0,f[n+h]=t.x1,f[n+h+1]=t.y1,f[n+2*h]=t.x2,f[n+2*h+1]=t.y2,f[n+3*h]=t.x3,f[n+3*h+1]=t.y3,n+=4*h):(f[n]=0,f[n+1]=0,f[n+h]=0,f[n+h+1]=0,f[n+2*h]=0,f[n+2*h+1]=0,f[n+3*h]=0,f[n+3*h+1]=0,n+=4*h)}}uploadTint(b,e,g,f,h,n){for(let t=0;t<g;++t){var q=b[e+t];q=
k.Color.shared.setValue(q._tintRGB).toPremultiplied(q.alpha,0<q.texture.baseTexture.alphaMode);f[n]=q;f[n+h]=q;f[n+2*h]=q;f[n+3*h]=q;n+=4*h}}destroy(){super.destroy();this.shader&&(this.shader.destroy(),this.shader=null);this.tempMatrix=null}}a.extension={name:"particle",type:k.ExtensionType.RendererPlugin};k.extensions.add(a);p.ParticleRenderer=a}
goog.provide("module$node_modules$$pixi$particle_container$lib$ParticleRenderer");
goog.global. module$node_modules$$pixi$particle_container$lib$ParticleRenderer=shadow.js.require(358, {});
