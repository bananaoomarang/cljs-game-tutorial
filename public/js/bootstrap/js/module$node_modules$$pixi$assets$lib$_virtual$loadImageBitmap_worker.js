shadow$provide.module$node_modules$$pixi$assets$lib$_virtual$loadImageBitmap_worker = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  let WORKER_URL = null;
  class WorkerInstance extends Worker {
    constructor() {
      WORKER_URL || (WORKER_URL = URL.createObjectURL(new Blob(['(function() {\n  "use strict";\n  async function loadImageBitmap(url) {\n    const response \x3d await fetch(url);\n    if (!response.ok)\n      throw new Error(`[WorkerManager.loadImageBitmap] Failed to fetch ${url}: ${response.status} ${response.statusText}`);\n    const imageBlob \x3d await response.blob();\n    return await createImageBitmap(imageBlob);\n  }\n  self.onmessage \x3d async (event) \x3d\x3e {\n    try {\n      const imageBitmap \x3d await loadImageBitmap(event.data.data[0]);\n      self.postMessage({\n        data: imageBitmap,\n        uuid: event.data.uuid,\n        id: event.data.id\n      }, [imageBitmap]);\n    } catch (e) {\n      self.postMessage({\n        error: e,\n        uuid: event.data.uuid,\n        id: event.data.id\n      });\n    }\n  };\n})();\n'], 
      {type:"application/javascript"})));
      super(WORKER_URL);
    }
  }
  WorkerInstance.revokeObjectURL = function() {
    WORKER_URL && (URL.revokeObjectURL(WORKER_URL), WORKER_URL = null);
  };
  exports.default = WorkerInstance;
};

goog.provide("module$node_modules$$pixi$assets$lib$_virtual$loadImageBitmap_worker");
goog.global. module$node_modules$$pixi$assets$lib$_virtual$loadImageBitmap_worker=shadow.js.require("module$node_modules$$pixi$assets$lib$_virtual$loadImageBitmap_worker", {});

//# sourceMappingURL=module$node_modules$$pixi$assets$lib$_virtual$loadImageBitmap_worker.js.map
