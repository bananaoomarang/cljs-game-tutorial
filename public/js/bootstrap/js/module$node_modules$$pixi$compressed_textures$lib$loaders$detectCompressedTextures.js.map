{
"version":3,
"file":"module$node_modules$$pixi$compressed_textures$lib$loaders$detectCompressedTextures.js",
"lineCount":22,
"mappings":"AAAAA,cAAA,CAAA,kFAAA,GAAuG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAI/IC,UAASA,+BAA8B,EAAG;AACxCC,cAAA,GAAa,CACXC,KAAMC,QAASC,CAAAA,YAAT,CAAsB,+BAAtB,CADK,EAEXC,UAAWF,QAASC,CAAAA,YAAT,CAAsB,oCAAtB,CAFA,EAIXE,IAAKH,QAASC,CAAAA,YAAT,CAAsB,8BAAtB,CAJM,EAKXG,KAAMJ,QAASC,CAAAA,YAAT,CAAsB,+BAAtB,CALK,EAMXI,MAAOL,QAASC,CAAAA,YAAT,CAAsB,gCAAtB,CAAPI,IAAkEL,QAASC,CAAAA,YAAT,CAAsB,uCAAtB,CANvD,EAOXK,IAAKN,QAASC,CAAAA,YAAT,CAAsB,8BAAtB,CAPM,EAQXM,KAAMP,QAASC,CAAAA,YAAT,CAAsB,+BAAtB,CARK;AASXO,SAAMR,QAASC,CAAAA,YAAT,CAAsB,8BAAtB,CATK,CAAb;AADwC;AAF1C,MAAIQ,OAAOf,OAAA,CAAQ,0CAAR,CAAX;AAF+I,MAG3IM,QAH2I,EAGjIF,UAHiI;AAiBzIY,QAAAA,GAA2B,CAC/BC,UAAW,CACTC,KAAMH,IAAKI,CAAAA,aAAcC,CAAAA,eADhB,EAETC,SAAU,CAFD,CADoB,EAK/BC,KAAMA,KAAM,EAANA,IAAY;AAChB,UAAMC,KAAKR,IAAKS,CAAAA,QAASC,CAAAA,OAAQC,CAAAA,YAAtB,EAAqCC,CAAAA,UAArC,CAAgD,OAAhD,CAAX;AACA,WAAOJ,EAAA,IAAMjB,QAAA,GAAWiB,EAAX,EAAe,CAAA,CAArB,KAA4BK,OAAQC,CAAAA,IAAR,CAAa,8CAAb,CAAA,EAA8D,CAAA,CAA1F,CAAP;AAFgB,GALa,EAS/BC,IAAKA,KAAOC,QAAPD,IAAmB;AACtB1B,cAAA,IAAcD,8BAAA,EAAd;AACA,UAAM6B,iBAAiB,EAAvB;AACA,SAAK,MAAMC,aAAX,GAA4B7B,WAA5B;AACEA,gBAAA,CAAW6B,aAAX,CAAA,IAA6BD,cAAeE,CAAAA,IAAf,CAAoBD,aAApB,CAA7B;AADF;AAEA,WAAO,CAAC,GAAGD,cAAJ,EAAoB,GAAGD,OAAvB,CAAP;AALsB,GATO,EAgB/BI,OAAQA,KAAOJ,QAAPI,KAAoB/B,UAAA,IAAcD,8BAAA,EAAd,EAAgD4B,OAAQK,CAAAA,MAAR,CAAgBC,CAAD,IAAO,EAAEA,CAAF,IAAOjC,UAAP,CAAtB,CAApE+B,CAhBuB,CAA3BnB;AAkBND,MAAKX,CAAAA,UAAW0B,CAAAA,GAAhB,CAAoBd,MAApB,CAAA;AACAd,SAAQc,CAAAA,wBAAR,GAAmCA,MAAnC;AApC+I,CAA/I;;",
"sources":["node_modules/@pixi/compressed-textures/lib/loaders/detectCompressedTextures.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$compressed_textures$lib$loaders$detectCompressedTextures\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\");\nlet storedGl, extensions;\nfunction getCompressedTextureExtensions() {\n  extensions = {\n    s3tc: storedGl.getExtension(\"WEBGL_compressed_texture_s3tc\"),\n    s3tc_sRGB: storedGl.getExtension(\"WEBGL_compressed_texture_s3tc_srgb\"),\n    /* eslint-disable-line camelcase */\n    etc: storedGl.getExtension(\"WEBGL_compressed_texture_etc\"),\n    etc1: storedGl.getExtension(\"WEBGL_compressed_texture_etc1\"),\n    pvrtc: storedGl.getExtension(\"WEBGL_compressed_texture_pvrtc\") || storedGl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\"),\n    atc: storedGl.getExtension(\"WEBGL_compressed_texture_atc\"),\n    astc: storedGl.getExtension(\"WEBGL_compressed_texture_astc\"),\n    bptc: storedGl.getExtension(\"EXT_texture_compression_bptc\")\n  };\n}\nconst detectCompressedTextures = {\n  extension: {\n    type: core.ExtensionType.DetectionParser,\n    priority: 2\n  },\n  test: async () => {\n    const gl = core.settings.ADAPTER.createCanvas().getContext(\"webgl\");\n    return gl ? (storedGl = gl, !0) : (console.warn(\"WebGL not available for compressed textures.\"), !1);\n  },\n  add: async (formats) => {\n    extensions || getCompressedTextureExtensions();\n    const textureFormats = [];\n    for (const extensionName in extensions)\n      extensions[extensionName] && textureFormats.push(extensionName);\n    return [...textureFormats, ...formats];\n  },\n  remove: async (formats) => (extensions || getCompressedTextureExtensions(), formats.filter((f) => !(f in extensions)))\n};\ncore.extensions.add(detectCompressedTextures);\nexports.detectCompressedTextures = detectCompressedTextures;\n//# sourceMappingURL=detectCompressedTextures.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","getCompressedTextureExtensions","extensions","s3tc","storedGl","getExtension","s3tc_sRGB","etc","etc1","pvrtc","atc","astc","bptc","core","detectCompressedTextures","extension","type","ExtensionType","DetectionParser","priority","test","gl","settings","ADAPTER","createCanvas","getContext","console","warn","add","formats","textureFormats","extensionName","push","remove","filter","f"]
}
