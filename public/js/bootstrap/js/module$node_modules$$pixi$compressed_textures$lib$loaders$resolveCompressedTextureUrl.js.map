{
"version":3,
"file":"module$node_modules$$pixi$compressed_textures$lib$loaders$resolveCompressedTextureUrl.js",
"lineCount":19,
"mappings":"AAAAA,cAAA,CAAA,qFAAA,GAA0G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAElJ,MAAIC,OAAOH,OAAA,CAAQ,0CAAR,CAAX;AACMI,QAAAA,GAA8B,CAClCC,UAAWF,IAAKG,CAAAA,aAAcC,CAAAA,aADI,EAElCC,KAAOC,KAADD,IAAW;AACTH,SAAAA,GAAYF,IAAKO,CAAAA,KAAMC,CAAAA,IAAKC,CAAAA,OAAhB,CAAwBH,KAAxB,CAA+BI,CAAAA,KAA/B,CAAqC,CAArC,CAAZR;AACN,WAAO,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAAwBS,CAAAA,QAAxB,CAAiCT,KAAjC,CAAP;AAFe,GAFiB,EAMlCU,MAAQN,KAADM,IAAW;AAChB,UAAMV,YAAYF,IAAKO,CAAAA,KAAMC,CAAAA,IAAKC,CAAAA,OAAhB,CAAwBH,KAAxB,CAA+BI,CAAAA,KAA/B,CAAqC,CAArC,CAAlB;AACA,QAAkB,KAAlB,KAAIR,SAAJ,CAAyB;AACvB,YAAMW,cAAc,oFAAA,CAAA,KAAA,CAAA,GAAA,CAApB;AAUA,UAAIA,WAAYC,CAAAA,IAAZ,CAAkBC,GAAD,IAAST,KAAMU,CAAAA,QAAN,CAAeD,GAAf,CAA1B,CAAJ;AACE,eAAO,CACLE,WAAYC,UAAA,CAAWlB,IAAKmB,CAAAA,QAASC,CAAAA,aAAcC,CAAAA,IAA5B,CAAiCf,KAAjC,CAAA,GAA0C,CAA1C,CAAX,IAA2D,GAA3D,CADP,EAELgB,OAAQT,WAAYU,CAAAA,IAAZ,CAAkBR,GAAD,IAAST,KAAMU,CAAAA,QAAN,CAAeD,GAAf,CAA1B,CAFH,EAGLS,IAAKlB,KAHA,CAAP;AADF;AAXuB;AAkBzB,WAAO,CACLW,WAAYC,UAAA,CAAWlB,IAAKmB,CAAAA,QAASC,CAAAA,aAAcC,CAAAA,IAA5B,CAAiCf,KAAjC,CAAA,GAA0C,CAA1C,CAAX,IAA2D,GAA3D,CADP,EAELgB,OAAQpB,SAFH,EAGLsB,IAAKlB,KAHA,CAAP;AApBgB,GANgB,CAA9BL;AAiCND,MAAKyB,CAAAA,UAAWC,CAAAA,GAAhB,CAAoBzB,MAApB,CAAA;AACAF,SAAQE,CAAAA,2BAAR,GAAsCA,MAAtC;AArCkJ,CAAlJ;;",
"sources":["node_modules/@pixi/compressed-textures/lib/loaders/resolveCompressedTextureUrl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$compressed_textures$lib$loaders$resolveCompressedTextureUrl\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\");\nconst resolveCompressedTextureUrl = {\n  extension: core.ExtensionType.ResolveParser,\n  test: (value) => {\n    const extension = core.utils.path.extname(value).slice(1);\n    return [\"basis\", \"ktx\", \"dds\"].includes(extension);\n  },\n  parse: (value) => {\n    const extension = core.utils.path.extname(value).slice(1);\n    if (extension === \"ktx\") {\n      const extensions2 = [\n        \".s3tc.ktx\",\n        \".s3tc_sRGB.ktx\",\n        \".etc.ktx\",\n        \".etc1.ktx\",\n        \".pvrt.ktx\",\n        \".atc.ktx\",\n        \".astc.ktx\",\n        \".bptc.ktx\"\n      ];\n      if (extensions2.some((ext) => value.endsWith(ext)))\n        return {\n          resolution: parseFloat(core.settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n          format: extensions2.find((ext) => value.endsWith(ext)),\n          src: value\n        };\n    }\n    return {\n      resolution: parseFloat(core.settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n      format: extension,\n      src: value\n    };\n  }\n};\ncore.extensions.add(resolveCompressedTextureUrl);\nexports.resolveCompressedTextureUrl = resolveCompressedTextureUrl;\n//# sourceMappingURL=resolveCompressedTextureUrl.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","resolveCompressedTextureUrl","extension","ExtensionType","ResolveParser","test","value","utils","path","extname","slice","includes","parse","extensions2","some","ext","endsWith","resolution","parseFloat","settings","RETINA_PREFIX","exec","format","find","src","extensions","add"]
}
