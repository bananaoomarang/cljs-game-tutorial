{
"version":3,
"file":"module$node_modules$call_bind$index.js",
"lineCount":19,
"mappings":"AAAAA,cAAA,CAAA,mCAAA,GAAwD,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGhG,MAAIC,OAAOH,OAAA,CAAQ,yCAAR,CAAX;AACII,QAAAA,GAAeJ,OAAA,CAAQ,yCAAR,CAAfI;AACJ,MAAIC,oBAAoBL,OAAA,CAAQ,+CAAR,CAAxB,EAEIM,aAAaN,OAAA,CAAQ,oCAAR,CAFjB,EAGIO,SAASH,MAAA,CAAa,4BAAb,CAHb,EAIII,QAAQJ,MAAA,CAAa,2BAAb,CAJZ,EAKIK,gBAAgBL,MAAA,CAAa,iBAAb,EAAgC,CAAA,CAAhC,CAAhBK,IAAyDN,IAAKO,CAAAA,IAAL,CAAUF,KAAV,EAAiBD,MAAjB,CAL7D;AAOII,SAAAA,GAAkBX,OAAA,CAAQ,8CAAR,CAAlBW;AACJ,MAAIC,OAAOR,MAAA,CAAa,YAAb,CAAX;AAEAH,QAAOC,CAAAA,OAAP,GAAiBW,QAAiB,CAACC,gBAAD,CAAmB;AACpD,QAAgC,UAAhC,KAAI,MAAOA,iBAAX;AACC,YAAM,IAAIR,UAAJ,CAAe,wBAAf,CAAN;AADD;AAGA,QAAIS,OAAON,aAAA,CAAcN,IAAd,EAAoBK,KAApB,EAA2BQ,SAA3B,CAAX;AACA,WAAOX,iBAAA,CACNU,IADM,EAEN,CAFM,GAEFH,IAAA,CAAK,CAAL,EAAQE,gBAAiBG,CAAAA,MAAzB,IAAmCD,SAAUC,CAAAA,MAA7C,GAAsD,CAAtD,EAFE,EAGN,CAAA,CAHM,CAAP;AALoD,GAArD;AAYIC,QAAAA,GAAYA,QAAkB,EAAG;AACpC,WAAOT,aAAA,CAAcN,IAAd,EAAoBI,MAApB,EAA4BS,SAA5B,CAAP;AADoC,GAAjCE;AAIAP,SAAJ,GACCA,OAAA,CAAgBV,MAAOC,CAAAA,OAAvB,EAAgC,OAAhC,EAAyC,CAAEiB,MAAOD,MAAT,CAAzC,CADD,GAGCjB,MAAOC,CAAAA,OAAQkB,CAAAA,KAHhB,GAGwBF,MAHxB;AA/BgG,CAAhG;;",
"sources":["node_modules/call-bind/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$call_bind$index\"] = function(global,require,module,exports) {\n'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\nvar setFunctionLength = require('set-function-length');\n\nvar $TypeError = require('es-errors/type');\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $defineProperty = require('es-define-property');\nvar $max = GetIntrinsic('%Math.max%');\n\nmodule.exports = function callBind(originalFunction) {\n\tif (typeof originalFunction !== 'function') {\n\t\tthrow new $TypeError('a function is required');\n\t}\n\tvar func = $reflectApply(bind, $call, arguments);\n\treturn setFunctionLength(\n\t\tfunc,\n\t\t1 + $max(0, originalFunction.length - (arguments.length - 1)),\n\t\ttrue\n\t);\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","bind","GetIntrinsic","setFunctionLength","$TypeError","$apply","$call","$reflectApply","call","$defineProperty","$max","module.exports","originalFunction","func","arguments","length","applyBind","value","apply"]
}
