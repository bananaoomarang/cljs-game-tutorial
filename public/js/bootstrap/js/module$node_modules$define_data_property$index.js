shadow$provide.module$node_modules$define_data_property$index = function(global, require, module, exports) {
  var $defineProperty = require("module$node_modules$es_define_property$index"), $SyntaxError = require("module$node_modules$es_errors$syntax"), $TypeError = require("module$node_modules$es_errors$type"), gopd = require("module$node_modules$gopd$index");
  module.exports = function(obj, property, value) {
    if (!obj || "object" !== typeof obj && "function" !== typeof obj) {
      throw new $TypeError("`obj` must be an object or a function`");
    }
    if ("string" !== typeof property && "symbol" !== typeof property) {
      throw new $TypeError("`property` must be a string or a symbol`");
    }
    if (3 < arguments.length && "boolean" !== typeof arguments[3] && null !== arguments[3]) {
      throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
    }
    if (4 < arguments.length && "boolean" !== typeof arguments[4] && null !== arguments[4]) {
      throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
    }
    if (5 < arguments.length && "boolean" !== typeof arguments[5] && null !== arguments[5]) {
      throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
    }
    if (6 < arguments.length && "boolean" !== typeof arguments[6]) {
      throw new $TypeError("`loose`, if provided, must be a boolean");
    }
    var nonEnumerable = 3 < arguments.length ? arguments[3] : null, nonWritable = 4 < arguments.length ? arguments[4] : null, nonConfigurable = 5 < arguments.length ? arguments[5] : null, loose = 6 < arguments.length ? arguments[6] : !1, desc = !!gopd && gopd(obj, property);
    if ($defineProperty) {
      $defineProperty(obj, property, {configurable:null === nonConfigurable && desc ? desc.configurable : !nonConfigurable, enumerable:null === nonEnumerable && desc ? desc.enumerable : !nonEnumerable, value, writable:null === nonWritable && desc ? desc.writable : !nonWritable});
    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
      obj[property] = value;
    } else {
      throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
    }
  };
};

goog.provide("module$node_modules$define_data_property$index");
goog.global. module$node_modules$define_data_property$index=shadow.js.require("module$node_modules$define_data_property$index", {});

//# sourceMappingURL=module$node_modules$define_data_property$index.js.map
