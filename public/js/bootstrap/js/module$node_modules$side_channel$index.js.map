{
"version":3,
"file":"module$node_modules$side_channel$index.js",
"lineCount":60,
"mappings":"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",
"sources":["node_modules/side-channel/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$side_channel$index\"] = function(global,require,module,exports) {\n'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\nvar inspect = require('object-inspect');\n\nvar $TypeError = require('es-errors/type');\nvar $WeakMap = GetIntrinsic('%WeakMap%', true);\nvar $Map = GetIntrinsic('%Map%', true);\n\nvar $weakMapGet = callBound('WeakMap.prototype.get', true);\nvar $weakMapSet = callBound('WeakMap.prototype.set', true);\nvar $weakMapHas = callBound('WeakMap.prototype.has', true);\nvar $mapGet = callBound('Map.prototype.get', true);\nvar $mapSet = callBound('Map.prototype.set', true);\nvar $mapHas = callBound('Map.prototype.has', true);\n\n/*\n* This function traverses the list returning the node corresponding to the given key.\n*\n* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.\n*/\n/** @type {import('.').listGetNode} */\nvar listGetNode = function (list, key) { // eslint-disable-line consistent-return\n\t/** @type {typeof list | NonNullable<(typeof list)['next']>} */\n\tvar prev = list;\n\t/** @type {(typeof list)['next']} */\n\tvar curr;\n\tfor (; (curr = prev.next) !== null; prev = curr) {\n\t\tif (curr.key === key) {\n\t\t\tprev.next = curr.next;\n\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\tcurr.next = /** @type {NonNullable<typeof list.next>} */ (list.next);\n\t\t\tlist.next = curr; // eslint-disable-line no-param-reassign\n\t\t\treturn curr;\n\t\t}\n\t}\n};\n\n/** @type {import('.').listGet} */\nvar listGet = function (objects, key) {\n\tvar node = listGetNode(objects, key);\n\treturn node && node.value;\n};\n/** @type {import('.').listSet} */\nvar listSet = function (objects, key, value) {\n\tvar node = listGetNode(objects, key);\n\tif (node) {\n\t\tnode.value = value;\n\t} else {\n\t\t// Prepend the new node to the beginning of the list\n\t\tobjects.next = /** @type {import('.').ListNode<typeof value>} */ ({ // eslint-disable-line no-param-reassign, no-extra-parens\n\t\t\tkey: key,\n\t\t\tnext: objects.next,\n\t\t\tvalue: value\n\t\t});\n\t}\n};\n/** @type {import('.').listHas} */\nvar listHas = function (objects, key) {\n\treturn !!listGetNode(objects, key);\n};\n\n/** @type {import('.')} */\nmodule.exports = function getSideChannel() {\n\t/** @type {WeakMap<object, unknown>} */ var $wm;\n\t/** @type {Map<object, unknown>} */ var $m;\n\t/** @type {import('.').RootNode<unknown>} */ var $o;\n\n\t/** @type {import('.').Channel} */\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapGet($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapGet($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listGet($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thas: function (key) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapHas($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapHas($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listHas($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif (!$wm) {\n\t\t\t\t\t$wm = new $WeakMap();\n\t\t\t\t}\n\t\t\t\t$weakMapSet($wm, key, value);\n\t\t\t} else if ($Map) {\n\t\t\t\tif (!$m) {\n\t\t\t\t\t$m = new $Map();\n\t\t\t\t}\n\t\t\t\t$mapSet($m, key, value);\n\t\t\t} else {\n\t\t\t\tif (!$o) {\n\t\t\t\t\t// Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head\n\t\t\t\t\t$o = { key: {}, next: null };\n\t\t\t\t}\n\t\t\t\tlistSet($o, key, value);\n\t\t\t}\n\t\t}\n\t};\n\treturn channel;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetIntrinsic","callBound","inspect","$TypeError","$WeakMap","$Map","$weakMapGet","$weakMapSet","$weakMapHas","$mapGet","$mapSet","$mapHas","listGetNode","list","key","prev","curr","next","module.exports","$wm","$m","$o","channel","assert","has","get","node","value","set","objects"]
}
