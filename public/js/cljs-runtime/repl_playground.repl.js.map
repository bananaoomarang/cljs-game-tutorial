{"version":3,"sources":["repl_playground/repl.cljs"],"mappings":";AAMA,CAAMA,8BAAkBC;AACxB,AAAKC,kCAAW,AAACC;AAEjB,oCAAA,pCAAMC,gFAAcC;AAApB,AACE,kBAAKC,IAAIC;AAAT,AACE,0FAAA,cAAA,2CAAA,0KAAA,tTAACC,+CACAN,gCACAI,mHAEO,AAACG,gDAAQC,mCAAUR,iFACrBK,WACLF;;;AAEL,4BAAA,5BAAMM,gEAAMC;AAAZ,AACE,0EAAA,2CAAA,qDAAA,gBAAA,oEAAA,AAAA,iMAAA,xbAACC,mCAAUX;AAAX,AAGY,qDAAA,9CAACY,sBAAOF","names":["cljs.js/*eval-fn*","cljs.js/js-eval","repl-playground.repl/comp-state","cljs.env.default_compiler_env","repl-playground.repl/make-compile","handle-eval","str","ns","cljs.js.eval_str","cljs.core.partial","shadow.cljs.bootstrap.browser/load","repl-playground.repl/init","!eval-ready?","shadow.cljs.bootstrap.browser/init","cljs.core/reset!"],"sourcesContent":["(ns repl-playground.repl\n  (:require\n   [cljs.js]\n   [cljs.env :as env]\n   [shadow.cljs.bootstrap.browser :as boot]))\n\n(set! cljs.js/*eval-fn* cljs.js/js-eval)\n(def comp-state (env/default-compiler-env))\n\n(defn make-compile [handle-eval]\n  (fn [str ns]\n    (cljs.js/eval-str\n     comp-state\n     str\n     \"random-name\"\n     {:load (partial boot/load comp-state)\n      :ns ns}\n     handle-eval)))\n\n(defn init [!eval-ready?]\n  (boot/init comp-state\n             {:path \"/js/bootstrap\"\n              :load-on-init '#{shadow-eval.user}}\n             #(reset! !eval-ready? true)))\n"]}