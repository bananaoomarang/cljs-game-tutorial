{"version":3,"sources":["shadow/cljs/bootstrap/browser.cljs"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.bootstrap","js/shadow.cljs.bootstrap.browser","js/shadow.cljs.bootstrap.browser.init-opts","shadow.cljs.bootstrap.browser/init-opts","cljs.core.atom","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","shadow.cljs.bootstrap.browser/asset-path","seq11705","self__5712__auto__","cljs.core/seq","args","cljs.core.apply","cljs.core/str","cljs.core/deref","shadow.cljs.bootstrap.browser/compile-state-ref?","x","cljs.core/Atom","cljs.core/map?","shadow.cljs.bootstrap.browser/transit-read","txt","r","cognitect.transit.reader","cognitect.transit/read","shadow.cljs.bootstrap.browser/transit-load","path","callback","goog.net.XhrIo/send","res","req","cljs.core/not","cljs.core.ex_info","data","shadow.cljs.bootstrap.browser/script-eval","code","js/goog.globalEval","p__11708","map__11709","cljs.core/--destructure-map","cljs.core.get","shadow.cljs.bootstrap.browser/execute-load!","compile-state-ref","type","text","uri","ns","provides","load-info","temp__5804__auto__","load-fn","G__11710","cljs.core/Keyword","js/Error","cljs.js/load-analysis-cache!","cljs.core.swap_BANG_","shadow.cljs.bootstrap.env/loaded-ref","clojure.set/union","cljs.js/*loaded*","js","shadow.cljs.bootstrap.browser/queue-task!","task","js/goog.async.run","shadow.cljs.bootstrap.browser/load-namespaces","namespaces","cb","cljs.core/set?","cljs.core/every?","cljs.core/symbol?","cljs.core/fn?","deps-to-load-for-ns","shadow.cljs.bootstrap.env/find-deps","macro-deps","p1__11711#","cljs.core.filter","cljs.core._EQ_","cljs.core.map","cljs.core.reduce","p1__11712#","cljs.core.symbol","cljs.core.into","deps-to-load-with-macros","clojure.set.union","compile-state","things-already-loaded","p1__11713#","clojure.set/superset?","js-files-to-load","p1__11714#","cljs.core.remove","p__11719","map__11720","js-name","shadow.cljs.bootstrap.browser.asset_path","analyzer-data-to-load","p1__11715#","p1__11716#","cljs.core.get_in","p__11721","map__11722","ana-name","cljs.core/empty?","G__11723","uris","loader","js/goog.net.BulkLoader","cljs.core.into_array","js/goog.net.EventType.SUCCESS","e","texts","seq__11724","chunk__11725","count__11726","i__11727","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","load","p1__11717#","p2__11718#","cljs.core.assoc","G__11728","p__11729","map__11730","shadow.cljs.bootstrap.browser/load","name","macros","rc","cljs.core/Symbol","or__5002__auto__","shadow.cljs.bootstrap.env/get-ns-info","shadow.cljs.bootstrap.browser/fix-provide-conflict!","js/cljs","p__11732","map__11733","shadow.cljs.bootstrap.browser/init","load-on-init","opts","init-cb","cljs.core/reset!","shadow.cljs.bootstrap.env/index-ref","shadow.cljs.bootstrap.env/create-cljs-user!","shadow.cljs.bootstrap.env/replace-goog-require!","map__11734","exclude","idx","shadow.cljs.bootstrap.env/build-index","p1__11731#"],"sourcesContent":["(ns shadow.cljs.bootstrap.browser\n  (:require [clojure.set :as set]\n            [cljs.js :as cljs]\n            [cognitect.transit :as transit]\n            [shadow.js] ;; ensures that bootstrap namespaces can use js deps\n            [shadow.cljs.bootstrap.env :as env]\n            [goog.async.run]\n            [goog.net.XhrIo :as xhr])\n  (:import [goog.net BulkLoader]))\n\n\n(defonce init-opts (atom {:path \"/bootstrap\"\n                          :load-on-init []}))\n\n(defn asset-path [& args]\n  (apply str (:path @init-opts) args))\n\n(defn compile-state-ref? [x]\n  (and (instance? cljs.core/Atom x) (map? @x)))\n\n(defn transit-read [txt]\n  (let [r (transit/reader :json)]\n    (transit/read r txt)))\n\n(defn transit-load [path callback]\n  (xhr/send\n    path\n    (fn [res]\n      (this-as req\n        (if-not (.isSuccess req)\n          (throw (ex-info (str \"failed to download boostrap file:\" path \" status:\" (.getStatus req)) {:path path}))\n          (let [data (-> (.getResponseText req)\n                         (transit-read))]\n            (callback data)\n            ))))))\n\n(defn script-eval [code]\n  (js/goog.globalEval code))\n\n(defn execute-load! [compile-state-ref {:keys [type text uri ns provides] :as load-info}]\n  #_ (js/console.log \"load\" type ns load-info)\n  ;; quick hack for worker experiment, needs proper design\n  (when-let [load-fn (:load @init-opts)]\n    (load-fn load-info))\n  (case type\n    :analyzer\n    (let [data (transit-read text)]\n      (cljs/load-analysis-cache! compile-state-ref ns data))\n    :js\n    (do (swap! env/loaded-ref set/union provides)\n        (swap! cljs/*loaded* set/union provides)\n        (let [js (str text \"\\n//# sourceURL=\" uri \"\\n\")]\n          (script-eval js)))))\n\n(defn queue-task! [task]\n  ;; FIXME: this is a very naive queue that does all pending tasks at once\n  ;; should use something like window.requestIdleCallback that does as much work as\n  ;; possible in the time it was given and then yield control back to the browser\n  (js/goog.async.run task))\n\n(defn load-namespaces\n  \"loads a set of namespaces, must be called after init\"\n  [compile-state-ref namespaces cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (set? namespaces)\n         (every? symbol? namespaces)\n         (fn? cb)]}\n  (let [deps-to-load-for-ns\n        (env/find-deps namespaces)\n\n        macro-deps\n        (->> deps-to-load-for-ns\n             (filter #(= :cljs (:type %)))\n             (map :macro-requires)\n             (reduce set/union)\n             (map #(symbol (str % \"$macros\")))\n             (into #{}))\n\n        ;; second pass due to circular dependencies in macros\n        deps-to-load-with-macros\n        (env/find-deps (set/union namespaces macro-deps))\n\n        compile-state\n        @compile-state-ref\n\n        things-already-loaded\n        (->> deps-to-load-with-macros\n             (filter #(set/superset? @env/loaded-ref (:provides %)))\n             (map :provides)\n             (reduce set/union))\n\n        js-files-to-load\n        (->> deps-to-load-with-macros\n             (remove #(set/superset? @env/loaded-ref (:provides %)))\n             (map (fn [{:keys [ns provides js-name]}]\n                    {:type :js\n                     :ns ns\n                     :provides provides\n                     :uri (asset-path js-name)})))\n\n        analyzer-data-to-load\n        (->> deps-to-load-with-macros\n             (filter #(= :cljs (:type %)))\n             ;; :dump-core still populates the cljs.core analyzer data with an empty map\n             (filter #(nil? (get-in compile-state [:cljs.analyzer/namespaces (:ns %) :name])))\n             (map (fn [{:keys [ns ana-name]}]\n                    {:type :analyzer\n                     :ns ns\n                     :uri (asset-path ana-name)})))\n\n        load-info\n        (-> []\n            (into js-files-to-load)\n            (into analyzer-data-to-load))]\n\n    #_ (js/console.log \"going to load\" load-info)\n\n    ;; this is transfered to cljs/*loaded* here to delay it as much as possible\n    ;; the JS may already be loaded but the analyzer data may be missing\n    ;; this way cljs.js is forced to ask first\n    (swap! cljs/*loaded* set/union things-already-loaded)\n\n    ;; may not need to load anything sometimes?\n    (if (empty? load-info)\n      (cb {:lang :js :source \"\"})\n\n      (let [uris\n            (into [] (map :uri) load-info)\n\n            loader\n            (BulkLoader. (into-array uris))]\n\n        (.listen loader js/goog.net.EventType.SUCCESS\n          (fn [e]\n            (let [texts (.getResponseTexts loader)]\n              (doseq [load (map #(assoc %1 :text %2) load-info texts)]\n                (queue-task! #(execute-load! compile-state-ref load)))\n\n              #_ (queue-task! #(js/console.log \"compile-state after load\" @compile-state-ref))\n\n              ;; callback with dummy so cljs.js doesn't attempt to load deps all over again\n              (queue-task! #(cb {:lang :js :source \"\"}))\n              )))\n\n        (.load loader)))\n    ))\n\n(defn load\n  \":load fn for cljs.js, must be passed the compile-state as first arg\n   eg. :load (partial boot/load compile-state-ref)\"\n  [compile-state-ref {:keys [name path macros] :as rc} cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (symbol? name)\n         (fn? cb)]}\n  (let [ns (if macros\n             (symbol (str name \"$macros\"))\n             name)]\n    (or (get-in @compile-state-ref [:cljs.analyzer/namespaces ns])\n        (env/get-ns-info ns))\n    (load-namespaces compile-state-ref #{ns} cb)))\n\n(defn fix-provide-conflict! []\n  ;; since cljs.js unconditionally does a goog.require(\"cljs.core$macros\")\n  ;; the compile pretended to provide this but didn't\n  ;; need to remove that before we load it, otherwise it would goog.provide conflict\n  ;; FIXME: should test if actually empty, might delete something accidentally?\n  (js-delete js/cljs \"core$macros\"))\n\n(defn init\n  \"initializes the bootstrapped compiler by loading the dependency index\n   and loading cljs.core + macros (and namespaces specified in :load-on-init)\"\n  [compile-state-ref {:keys [load-on-init] :as opts} init-cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (map? opts)\n         (fn? init-cb)\n         (string? (:path opts))]}\n  ;; FIXME: add goog-define to path\n\n  (reset! init-opts opts)\n\n  (if @env/index-ref\n    (init-cb)\n    (do (fix-provide-conflict!)\n        (env/create-cljs-user!)\n        (env/replace-goog-require!)\n        (transit-load (asset-path \"/index.transit.json\")\n          (fn [data]\n            ;; pretend that all excluded macro namespaces are loaded\n            ;; so CLJS doesn't request them\n            ;; the macro are never available so any code trying to use them will fail\n            (let [{:keys [exclude] :as idx} (env/build-index data)]\n              (swap! cljs/*loaded* set/union (into #{} (map #(symbol (str % \"$macros\"))) exclude)))\n\n            (load-namespaces\n              compile-state-ref\n              (into '#{cljs.core cljs.core$macros} load-on-init)\n              init-cb))))))\n"],"x_google_ignoreList":[0]}