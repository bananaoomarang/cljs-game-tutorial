{"version":3,"sources":["shadow/cljs/bootstrap/env.cljs"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.bootstrap","js/shadow.cljs.bootstrap.env","js/shadow.cljs.bootstrap.env.loaded-ref","shadow.cljs.bootstrap.env/loaded-ref","cljs.core.atom","shadow.cljs.bootstrap.env/set-loaded","namespaces","loaded","cljs.core.into","cljs.core.map","cljs.core/symbol","cljs.core.swap_BANG_","clojure.set/union","js/shadow.cljs.bootstrap.env.index-ref","shadow.cljs.bootstrap.env/index-ref","p__11686","map__11687","cljs.core/--destructure-map","cljs.core.get","shadow.cljs.bootstrap.env/build-index","sources","exclude","data","idx","cljs.core.reduce","p__11688","map__11689","resource-id","rc","cljs.core/assoc-in","p__11690","vec__11691","cljs.core.nth","provide","iter__5480__auto__","s__11695","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","map__11700","cljs.core/first","iterys__5476__auto__","s__11697","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__11699","cljs.core/chunk-buffer","i__11698","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__11696","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__11694","provides","cljs.core/reset!","shadow.cljs.bootstrap.env/get-ns-info","ns","cljs.core/deref","id","cljs.core.get_in","or__5002__auto__","cljs.core.ex_info","js/Error","shadow.cljs.bootstrap.env/find-deps","entries","cljs.core/set?","cljs.core/every?","cljs.core/symbol?","cljs.core/reverse","p__11701","p__11702","map__11703","map__11704","deps","order","x","output-name","requires","src","cljs.core/not","clojure.set.intersection","clojure.set.union","cljs.core.conj","shadow.cljs.bootstrap.env/create-cljs-user!","js/goog.constructNamespace_","shadow.cljs.bootstrap.env/replace-goog-require!","js/goog.require","name","js/goog.getObjectByName","js/goog.module.getInternal_","cljs.core/chunk-first"],"sourcesContent":["(ns shadow.cljs.bootstrap.env\n  (:require [clojure.set :as set]))\n\n(defonce loaded-ref (atom #{}))\n\n;; calls to this will be injected by shadow-cljs\n;; it will receive an array of strings matching the goog.provide\n;; names that where provided by the \"app\"\n(defn set-loaded [namespaces]\n  (let [loaded (into #{} (map symbol) namespaces)]\n    (swap! loaded-ref set/union loaded)))\n\n(defonce index-ref (atom nil))\n\n(defn build-index [{:keys [sources exclude] :as data}]\n  (let [idx\n        (reduce\n          (fn [idx {:keys [resource-id] :as rc}]\n            (assoc-in idx [:sources resource-id] rc))\n          {:sources-ordered sources\n           :exclude exclude}\n          sources)\n\n        idx\n        (reduce\n          (fn [idx [provide resource-id]]\n            (assoc-in idx [:sym->id provide] resource-id))\n          idx\n          (for [{:keys [resource-id provides]} sources\n                provide provides]\n            [provide resource-id]))]\n\n    (reset! index-ref idx)\n\n    #_(js/console.log \"build-index\" idx)\n\n    idx))\n\n(defn get-ns-info [ns]\n  (let [idx @index-ref\n        id (get-in idx [:sym->id ns])]\n    (or (get-in idx [:sources id])\n        (throw (ex-info (str \"ns \" ns \" not available\") {:ns ns}))\n        )))\n\n(defn find-deps [entries]\n  {:pre [(set? entries)\n         (every? symbol? entries)]}\n  ;; abusing that :sources-ordered is in correct dependency order\n  ;; just walk in reverse and pick up everything along the way\n  (->> (reverse (:sources-ordered @index-ref))\n       (reduce\n         (fn [{:keys [deps order] :as x} {:keys [resource-id output-name provides requires] :as src}]\n\n           (cond\n             ;; don't load files that don't provide anything we want\n             (not (seq (set/intersection deps provides)))\n             x\n\n             :else\n             {:deps (set/union deps requires)\n              :order (conj order src)}))\n         {:deps entries\n          :order []})\n       (:order)\n       (reverse)\n       (into [])))\n\n(defn create-cljs-user! []\n  ;; must create this namespace since it always exists\n  ;; in the analyzer data and a blank (def x 1) will otherwise\n  ;; error you when trying to eval because it can't create cljs.user.x\n  ;; without cljs.user existing and it never does anything to ensure\n  ;; it exists first\n  (js/goog.constructNamespace_ \"cljs.user\"))\n\n(defn replace-goog-require! []\n  ;; must replace goog.require so it always has a return value\n  ;; otherwise transpiled goog.module namespaces using goog.require will end up with undefined references\n  ;; don't need any other the other stuff it is doing since we are not using the debug loader\n  (set! js/goog.require\n    (fn [name]\n      (or (js/goog.getObjectByName name)\n          (js/goog.module.getInternal_ name)))))"],"x_google_ignoreList":[0]}